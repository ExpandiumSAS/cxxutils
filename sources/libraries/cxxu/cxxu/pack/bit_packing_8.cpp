//
// Automatically generated by gen-bit-packers, do not edit
//
#include <cxxu/pack/bit_packing_8.hpp>

namespace cxxu {
namespace pack {

void
pack_8_into_1(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 8) {
        out[c + 0]  = ((in[w + 0] & 0x01U) <<  0);
        out[c + 0] |= ((in[w + 1] & 0x01U) <<  1);
        out[c + 0] |= ((in[w + 2] & 0x01U) <<  2);
        out[c + 0] |= ((in[w + 3] & 0x01U) <<  3);
        out[c + 0] |= ((in[w + 4] & 0x01U) <<  4);
        out[c + 0] |= ((in[w + 5] & 0x01U) <<  5);
        out[c + 0] |= ((in[w + 6] & 0x01U) <<  6);
        out[c + 0] |= ((in[w + 7] & 0x01U) <<  7);
    }
}

void
pack_8_into_2(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 4) {
        out[c + 0]  = ((in[w + 0] & 0x03U) <<  0);
        out[c + 0] |= ((in[w + 1] & 0x03U) <<  2);
        out[c + 0] |= ((in[w + 2] & 0x03U) <<  4);
        out[c + 0] |= ((in[w + 3] & 0x03U) <<  6);
    }
}

void
pack_8_into_3(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t c = 0, w = 0; w < n; c += 3, w += 8) {
        out[c + 0]  = ((in[w + 0] & 0x07U) <<  0);
        out[c + 0] |= ((in[w + 1] & 0x07U) <<  3);
        out[c + 0] |= ((in[w + 2] & 0x07U) <<  6);
        out[c + 1]  = ((in[w + 3] & 0x07U) <<  1) | ((in[w + 2] & 0x07U) >> 2);
        out[c + 1] |= ((in[w + 4] & 0x07U) <<  4);
        out[c + 1] |= ((in[w + 5] & 0x07U) <<  7);
        out[c + 2]  = ((in[w + 6] & 0x07U) <<  2) | ((in[w + 5] & 0x07U) >> 1);
        out[c + 2] |= ((in[w + 7] & 0x07U) <<  5);
    }
}

void
pack_8_into_4(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 2) {
        out[c + 0]  = ((in[w + 0] & 0x0fU) <<  0);
        out[c + 0] |= ((in[w + 1] & 0x0fU) <<  4);
    }
}

void
pack_8_into_5(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t c = 0, w = 0; w < n; c += 5, w += 8) {
        out[c + 0]  = ((in[w + 0] & 0x1fU) <<  0);
        out[c + 0] |= ((in[w + 1] & 0x1fU) <<  5);
        out[c + 1]  = ((in[w + 2] & 0x1fU) <<  2) | ((in[w + 1] & 0x1fU) >> 3);
        out[c + 1] |= ((in[w + 3] & 0x1fU) <<  7);
        out[c + 2]  = ((in[w + 4] & 0x1fU) <<  4) | ((in[w + 3] & 0x1fU) >> 1);
        out[c + 3]  = ((in[w + 5] & 0x1fU) <<  1) | ((in[w + 4] & 0x1fU) >> 4);
        out[c + 3] |= ((in[w + 6] & 0x1fU) <<  6);
        out[c + 4]  = ((in[w + 7] & 0x1fU) <<  3) | ((in[w + 6] & 0x1fU) >> 2);
    }
}

void
pack_8_into_6(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t c = 0, w = 0; w < n; c += 3, w += 4) {
        out[c + 0]  = ((in[w + 0] & 0x3fU) <<  0);
        out[c + 0] |= ((in[w + 1] & 0x3fU) <<  6);
        out[c + 1]  = ((in[w + 2] & 0x3fU) <<  4) | ((in[w + 1] & 0x3fU) >> 2);
        out[c + 2]  = ((in[w + 3] & 0x3fU) <<  2) | ((in[w + 2] & 0x3fU) >> 4);
    }
}

void
pack_8_into_7(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t c = 0, w = 0; w < n; c += 7, w += 8) {
        out[c + 0]  = ((in[w + 0] & 0x7fU) <<  0);
        out[c + 0] |= ((in[w + 1] & 0x7fU) <<  7);
        out[c + 1]  = ((in[w + 2] & 0x7fU) <<  6) | ((in[w + 1] & 0x7fU) >> 1);
        out[c + 2]  = ((in[w + 3] & 0x7fU) <<  5) | ((in[w + 2] & 0x7fU) >> 2);
        out[c + 3]  = ((in[w + 4] & 0x7fU) <<  4) | ((in[w + 3] & 0x7fU) >> 3);
        out[c + 4]  = ((in[w + 5] & 0x7fU) <<  3) | ((in[w + 4] & 0x7fU) >> 4);
        out[c + 5]  = ((in[w + 6] & 0x7fU) <<  2) | ((in[w + 5] & 0x7fU) >> 5);
        out[c + 6]  = ((in[w + 7] & 0x7fU) <<  1) | ((in[w + 6] & 0x7fU) >> 6);
    }
}
void
unpack_1_into_8(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 1) {
        out[w + 0] = ((in[c + 0] & 0x01U) >>  0);
        out[w + 1] = ((in[c + 0] & 0x02U) >>  1);
        out[w + 2] = ((in[c + 0] & 0x04U) >>  2);
        out[w + 3] = ((in[c + 0] & 0x08U) >>  3);
        out[w + 4] = ((in[c + 0] & 0x10U) >>  4);
        out[w + 5] = ((in[c + 0] & 0x20U) >>  5);
        out[w + 6] = ((in[c + 0] & 0x40U) >>  6);
        out[w + 7] = ((in[c + 0] & 0x80U) >>  7);
    }
}
void
unpack_2_into_8(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t w = 0, c = 0; w < n; w += 4, c += 1) {
        out[w + 0] = ((in[c + 0] & 0x03U) >>  0);
        out[w + 1] = ((in[c + 0] & 0x0cU) >>  2);
        out[w + 2] = ((in[c + 0] & 0x30U) >>  4);
        out[w + 3] = ((in[c + 0] & 0xc0U) >>  6);
    }
}
void
unpack_3_into_8(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 3) {
        out[w + 0] = ((in[c + 0] & 0x07U) >>  0);
        out[w + 1] = ((in[c + 0] & 0x38U) >>  3);
        out[w + 2] = (((in[c + 0] & 0xc0U) >>  6) | (in[c + 1] & 0x01U) << 2);
        out[w + 3] = ((in[c + 1] & 0x0eU) >>  1);
        out[w + 4] = ((in[c + 1] & 0x70U) >>  4);
        out[w + 5] = (((in[c + 1] & 0x80U) >>  7) | (in[c + 2] & 0x03U) << 1);
        out[w + 6] = ((in[c + 2] & 0x1cU) >>  2);
        out[w + 7] = ((in[c + 2] & 0xe0U) >>  5);
    }
}
void
unpack_4_into_8(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t w = 0, c = 0; w < n; w += 2, c += 1) {
        out[w + 0] = ((in[c + 0] & 0x0fU) >>  0);
        out[w + 1] = ((in[c + 0] & 0xf0U) >>  4);
    }
}
void
unpack_5_into_8(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 5) {
        out[w + 0] = ((in[c + 0] & 0x1fU) >>  0);
        out[w + 1] = (((in[c + 0] & 0xe0U) >>  5) | (in[c + 1] & 0x03U) << 3);
        out[w + 2] = ((in[c + 1] & 0x7cU) >>  2);
        out[w + 3] = (((in[c + 1] & 0x80U) >>  7) | (in[c + 2] & 0x0fU) << 1);
        out[w + 4] = (((in[c + 2] & 0xf0U) >>  4) | (in[c + 3] & 0x01U) << 4);
        out[w + 5] = ((in[c + 3] & 0x3eU) >>  1);
        out[w + 6] = (((in[c + 3] & 0xc0U) >>  6) | (in[c + 4] & 0x07U) << 2);
        out[w + 7] = ((in[c + 4] & 0xf8U) >>  3);
    }
}
void
unpack_6_into_8(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t w = 0, c = 0; w < n; w += 4, c += 3) {
        out[w + 0] = ((in[c + 0] & 0x3fU) >>  0);
        out[w + 1] = (((in[c + 0] & 0xc0U) >>  6) | (in[c + 1] & 0x0fU) << 2);
        out[w + 2] = (((in[c + 1] & 0xf0U) >>  4) | (in[c + 2] & 0x03U) << 4);
        out[w + 3] = ((in[c + 2] & 0xfcU) >>  2);
    }
}
void
unpack_7_into_8(
    uint8_t* __restrict__ out,
    const uint8_t* __restrict__ in,
    uint32_t n
)
{
    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 7) {
        out[w + 0] = ((in[c + 0] & 0x7fU) >>  0);
        out[w + 1] = (((in[c + 0] & 0x80U) >>  7) | (in[c + 1] & 0x3fU) << 1);
        out[w + 2] = (((in[c + 1] & 0xc0U) >>  6) | (in[c + 2] & 0x1fU) << 2);
        out[w + 3] = (((in[c + 2] & 0xe0U) >>  5) | (in[c + 3] & 0x0fU) << 3);
        out[w + 4] = (((in[c + 3] & 0xf0U) >>  4) | (in[c + 4] & 0x07U) << 4);
        out[w + 5] = (((in[c + 4] & 0xf8U) >>  3) | (in[c + 5] & 0x03U) << 5);
        out[w + 6] = (((in[c + 5] & 0xfcU) >>  2) | (in[c + 6] & 0x01U) << 6);
        out[w + 7] = ((in[c + 6] & 0xfeU) >>  1);
    }
}

packer_8_ptr packer_8_table[8] = {
    0,
    pack_8_into_1,
    pack_8_into_2,
    pack_8_into_3,
    pack_8_into_4,
    pack_8_into_5,
    pack_8_into_6,
    pack_8_into_7
};

unpacker_8_ptr unpacker_8_table[8] = {
    0,
    unpack_1_into_8,
    unpack_2_into_8,
    unpack_3_into_8,
    unpack_4_into_8,
    unpack_5_into_8,
    unpack_6_into_8,
    unpack_7_into_8
};

} // namespace pack
} // namespace cxxu
