//
// Automatically generated by gen-bit-packers, do not edit
//
#include <immintrin.h>

#include <cxxu/pack/bit_packing_32.hpp>

namespace cxxu {
namespace pack {

//
// Various SIMD intrinsics helpers to ease writing
//
inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
adapt_mask_32(const uint32_t b)
{ return _mm_set1_epi32((uint32_t) b); }

inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
adapt_mask_32(const __m128i b)
{ return b; }

template <typename T>
inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
band_32(__m128i a, const T b)
{ return _mm_and_si128(a, adapt_mask_32(b)); }

template <typename T>
inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
band_set_32(__m128i a, const T b)
{ a = _mm_and_si128(a, adapt_mask_32(b)); return a; }

template <typename T>
inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
bor_32(__m128i a, const T b)
{ return _mm_or_si128(a, adapt_mask_32(b)); }

template <typename T>
inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
bor_set_32(__m128i a, const T b)
{ a = _mm_or_si128(a, adapt_mask_32(b)); return a; }

inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
shl_32(__m128i a, int count)
{ return _mm_slli_epi32(a, count); }

inline
__m128i __attribute__((__gnu_inline__, __always_inline__))
shr_32(__m128i a, int count)
{ return _mm_srli_epi32(a, count); }

void
pack_32_into_1_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 32) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x00000001U),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x00000001U),  1);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x00000001U),  2);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x00000001U),  3);
        out[c + 0] |= shl_32(band_32(in[w +  4], 0x00000001U),  4);
        out[c + 0] |= shl_32(band_32(in[w +  5], 0x00000001U),  5);
        out[c + 0] |= shl_32(band_32(in[w +  6], 0x00000001U),  6);
        out[c + 0] |= shl_32(band_32(in[w +  7], 0x00000001U),  7);
        out[c + 0] |= shl_32(band_32(in[w +  8], 0x00000001U),  8);
        out[c + 0] |= shl_32(band_32(in[w +  9], 0x00000001U),  9);
        out[c + 0] |= shl_32(band_32(in[w + 10], 0x00000001U), 10);
        out[c + 0] |= shl_32(band_32(in[w + 11], 0x00000001U), 11);
        out[c + 0] |= shl_32(band_32(in[w + 12], 0x00000001U), 12);
        out[c + 0] |= shl_32(band_32(in[w + 13], 0x00000001U), 13);
        out[c + 0] |= shl_32(band_32(in[w + 14], 0x00000001U), 14);
        out[c + 0] |= shl_32(band_32(in[w + 15], 0x00000001U), 15);
        out[c + 0] |= shl_32(band_32(in[w + 16], 0x00000001U), 16);
        out[c + 0] |= shl_32(band_32(in[w + 17], 0x00000001U), 17);
        out[c + 0] |= shl_32(band_32(in[w + 18], 0x00000001U), 18);
        out[c + 0] |= shl_32(band_32(in[w + 19], 0x00000001U), 19);
        out[c + 0] |= shl_32(band_32(in[w + 20], 0x00000001U), 20);
        out[c + 0] |= shl_32(band_32(in[w + 21], 0x00000001U), 21);
        out[c + 0] |= shl_32(band_32(in[w + 22], 0x00000001U), 22);
        out[c + 0] |= shl_32(band_32(in[w + 23], 0x00000001U), 23);
        out[c + 0] |= shl_32(band_32(in[w + 24], 0x00000001U), 24);
        out[c + 0] |= shl_32(band_32(in[w + 25], 0x00000001U), 25);
        out[c + 0] |= shl_32(band_32(in[w + 26], 0x00000001U), 26);
        out[c + 0] |= shl_32(band_32(in[w + 27], 0x00000001U), 27);
        out[c + 0] |= shl_32(band_32(in[w + 28], 0x00000001U), 28);
        out[c + 0] |= shl_32(band_32(in[w + 29], 0x00000001U), 29);
        out[c + 0] |= shl_32(band_32(in[w + 30], 0x00000001U), 30);
        out[c + 0] |= shl_32(band_32(in[w + 31], 0x00000001U), 31);
    }
}

void
pack_32_into_2_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 16) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x00000003U),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x00000003U),  2);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x00000003U),  4);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x00000003U),  6);
        out[c + 0] |= shl_32(band_32(in[w +  4], 0x00000003U),  8);
        out[c + 0] |= shl_32(band_32(in[w +  5], 0x00000003U), 10);
        out[c + 0] |= shl_32(band_32(in[w +  6], 0x00000003U), 12);
        out[c + 0] |= shl_32(band_32(in[w +  7], 0x00000003U), 14);
        out[c + 0] |= shl_32(band_32(in[w +  8], 0x00000003U), 16);
        out[c + 0] |= shl_32(band_32(in[w +  9], 0x00000003U), 18);
        out[c + 0] |= shl_32(band_32(in[w + 10], 0x00000003U), 20);
        out[c + 0] |= shl_32(band_32(in[w + 11], 0x00000003U), 22);
        out[c + 0] |= shl_32(band_32(in[w + 12], 0x00000003U), 24);
        out[c + 0] |= shl_32(band_32(in[w + 13], 0x00000003U), 26);
        out[c + 0] |= shl_32(band_32(in[w + 14], 0x00000003U), 28);
        out[c + 0] |= shl_32(band_32(in[w + 15], 0x00000003U), 30);
    }
}

void
pack_32_into_3_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 3, w += 32) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x00000007U),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x00000007U),  3);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x00000007U),  6);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x00000007U),  9);
        out[c + 0] |= shl_32(band_32(in[w +  4], 0x00000007U), 12);
        out[c + 0] |= shl_32(band_32(in[w +  5], 0x00000007U), 15);
        out[c + 0] |= shl_32(band_32(in[w +  6], 0x00000007U), 18);
        out[c + 0] |= shl_32(band_32(in[w +  7], 0x00000007U), 21);
        out[c + 0] |= shl_32(band_32(in[w +  8], 0x00000007U), 24);
        out[c + 0] |= shl_32(band_32(in[w +  9], 0x00000007U), 27);
        out[c + 0] |= shl_32(band_32(in[w + 10], 0x00000007U), 30);
        out[c + 1]  = bor_32(shl_32(band_32(in[w + 11], 0x00000007U),  1), shr_32(band_32(in[w + 10], 0x00000007U), 2));
        out[c + 1] |= shl_32(band_32(in[w + 12], 0x00000007U),  4);
        out[c + 1] |= shl_32(band_32(in[w + 13], 0x00000007U),  7);
        out[c + 1] |= shl_32(band_32(in[w + 14], 0x00000007U), 10);
        out[c + 1] |= shl_32(band_32(in[w + 15], 0x00000007U), 13);
        out[c + 1] |= shl_32(band_32(in[w + 16], 0x00000007U), 16);
        out[c + 1] |= shl_32(band_32(in[w + 17], 0x00000007U), 19);
        out[c + 1] |= shl_32(band_32(in[w + 18], 0x00000007U), 22);
        out[c + 1] |= shl_32(band_32(in[w + 19], 0x00000007U), 25);
        out[c + 1] |= shl_32(band_32(in[w + 20], 0x00000007U), 28);
        out[c + 1] |= shl_32(band_32(in[w + 21], 0x00000007U), 31);
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 22], 0x00000007U),  2), shr_32(band_32(in[w + 21], 0x00000007U), 1));
        out[c + 2] |= shl_32(band_32(in[w + 23], 0x00000007U),  5);
        out[c + 2] |= shl_32(band_32(in[w + 24], 0x00000007U),  8);
        out[c + 2] |= shl_32(band_32(in[w + 25], 0x00000007U), 11);
        out[c + 2] |= shl_32(band_32(in[w + 26], 0x00000007U), 14);
        out[c + 2] |= shl_32(band_32(in[w + 27], 0x00000007U), 17);
        out[c + 2] |= shl_32(band_32(in[w + 28], 0x00000007U), 20);
        out[c + 2] |= shl_32(band_32(in[w + 29], 0x00000007U), 23);
        out[c + 2] |= shl_32(band_32(in[w + 30], 0x00000007U), 26);
        out[c + 2] |= shl_32(band_32(in[w + 31], 0x00000007U), 29);
    }
}

void
pack_32_into_4_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 8) {
        out[c + 0]  = shl_32(band_32(in[w + 0], 0x0000000fU),  0);
        out[c + 0] |= shl_32(band_32(in[w + 1], 0x0000000fU),  4);
        out[c + 0] |= shl_32(band_32(in[w + 2], 0x0000000fU),  8);
        out[c + 0] |= shl_32(band_32(in[w + 3], 0x0000000fU), 12);
        out[c + 0] |= shl_32(band_32(in[w + 4], 0x0000000fU), 16);
        out[c + 0] |= shl_32(band_32(in[w + 5], 0x0000000fU), 20);
        out[c + 0] |= shl_32(band_32(in[w + 6], 0x0000000fU), 24);
        out[c + 0] |= shl_32(band_32(in[w + 7], 0x0000000fU), 28);
    }
}

void
pack_32_into_5_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 5, w += 32) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x0000001fU),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x0000001fU),  5);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x0000001fU), 10);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x0000001fU), 15);
        out[c + 0] |= shl_32(band_32(in[w +  4], 0x0000001fU), 20);
        out[c + 0] |= shl_32(band_32(in[w +  5], 0x0000001fU), 25);
        out[c + 0] |= shl_32(band_32(in[w +  6], 0x0000001fU), 30);
        out[c + 1]  = bor_32(shl_32(band_32(in[w +  7], 0x0000001fU),  3), shr_32(band_32(in[w +  6], 0x0000001fU), 2));
        out[c + 1] |= shl_32(band_32(in[w +  8], 0x0000001fU),  8);
        out[c + 1] |= shl_32(band_32(in[w +  9], 0x0000001fU), 13);
        out[c + 1] |= shl_32(band_32(in[w + 10], 0x0000001fU), 18);
        out[c + 1] |= shl_32(band_32(in[w + 11], 0x0000001fU), 23);
        out[c + 1] |= shl_32(band_32(in[w + 12], 0x0000001fU), 28);
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 13], 0x0000001fU),  1), shr_32(band_32(in[w + 12], 0x0000001fU), 4));
        out[c + 2] |= shl_32(band_32(in[w + 14], 0x0000001fU),  6);
        out[c + 2] |= shl_32(band_32(in[w + 15], 0x0000001fU), 11);
        out[c + 2] |= shl_32(band_32(in[w + 16], 0x0000001fU), 16);
        out[c + 2] |= shl_32(band_32(in[w + 17], 0x0000001fU), 21);
        out[c + 2] |= shl_32(band_32(in[w + 18], 0x0000001fU), 26);
        out[c + 2] |= shl_32(band_32(in[w + 19], 0x0000001fU), 31);
        out[c + 3]  = bor_32(shl_32(band_32(in[w + 20], 0x0000001fU),  4), shr_32(band_32(in[w + 19], 0x0000001fU), 1));
        out[c + 3] |= shl_32(band_32(in[w + 21], 0x0000001fU),  9);
        out[c + 3] |= shl_32(band_32(in[w + 22], 0x0000001fU), 14);
        out[c + 3] |= shl_32(band_32(in[w + 23], 0x0000001fU), 19);
        out[c + 3] |= shl_32(band_32(in[w + 24], 0x0000001fU), 24);
        out[c + 3] |= shl_32(band_32(in[w + 25], 0x0000001fU), 29);
        out[c + 4]  = bor_32(shl_32(band_32(in[w + 26], 0x0000001fU),  2), shr_32(band_32(in[w + 25], 0x0000001fU), 3));
        out[c + 4] |= shl_32(band_32(in[w + 27], 0x0000001fU),  7);
        out[c + 4] |= shl_32(band_32(in[w + 28], 0x0000001fU), 12);
        out[c + 4] |= shl_32(band_32(in[w + 29], 0x0000001fU), 17);
        out[c + 4] |= shl_32(band_32(in[w + 30], 0x0000001fU), 22);
        out[c + 4] |= shl_32(band_32(in[w + 31], 0x0000001fU), 27);
    }
}

void
pack_32_into_6_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 3, w += 16) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x0000003fU),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x0000003fU),  6);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x0000003fU), 12);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x0000003fU), 18);
        out[c + 0] |= shl_32(band_32(in[w +  4], 0x0000003fU), 24);
        out[c + 0] |= shl_32(band_32(in[w +  5], 0x0000003fU), 30);
        out[c + 1]  = bor_32(shl_32(band_32(in[w +  6], 0x0000003fU),  4), shr_32(band_32(in[w +  5], 0x0000003fU), 2));
        out[c + 1] |= shl_32(band_32(in[w +  7], 0x0000003fU), 10);
        out[c + 1] |= shl_32(band_32(in[w +  8], 0x0000003fU), 16);
        out[c + 1] |= shl_32(band_32(in[w +  9], 0x0000003fU), 22);
        out[c + 1] |= shl_32(band_32(in[w + 10], 0x0000003fU), 28);
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 11], 0x0000003fU),  2), shr_32(band_32(in[w + 10], 0x0000003fU), 4));
        out[c + 2] |= shl_32(band_32(in[w + 12], 0x0000003fU),  8);
        out[c + 2] |= shl_32(band_32(in[w + 13], 0x0000003fU), 14);
        out[c + 2] |= shl_32(band_32(in[w + 14], 0x0000003fU), 20);
        out[c + 2] |= shl_32(band_32(in[w + 15], 0x0000003fU), 26);
    }
}

void
pack_32_into_7_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 7, w += 32) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x0000007fU),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x0000007fU),  7);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x0000007fU), 14);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x0000007fU), 21);
        out[c + 0] |= shl_32(band_32(in[w +  4], 0x0000007fU), 28);
        out[c + 1]  = bor_32(shl_32(band_32(in[w +  5], 0x0000007fU),  3), shr_32(band_32(in[w +  4], 0x0000007fU), 4));
        out[c + 1] |= shl_32(band_32(in[w +  6], 0x0000007fU), 10);
        out[c + 1] |= shl_32(band_32(in[w +  7], 0x0000007fU), 17);
        out[c + 1] |= shl_32(band_32(in[w +  8], 0x0000007fU), 24);
        out[c + 1] |= shl_32(band_32(in[w +  9], 0x0000007fU), 31);
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 10], 0x0000007fU),  6), shr_32(band_32(in[w +  9], 0x0000007fU), 1));
        out[c + 2] |= shl_32(band_32(in[w + 11], 0x0000007fU), 13);
        out[c + 2] |= shl_32(band_32(in[w + 12], 0x0000007fU), 20);
        out[c + 2] |= shl_32(band_32(in[w + 13], 0x0000007fU), 27);
        out[c + 3]  = bor_32(shl_32(band_32(in[w + 14], 0x0000007fU),  2), shr_32(band_32(in[w + 13], 0x0000007fU), 5));
        out[c + 3] |= shl_32(band_32(in[w + 15], 0x0000007fU),  9);
        out[c + 3] |= shl_32(band_32(in[w + 16], 0x0000007fU), 16);
        out[c + 3] |= shl_32(band_32(in[w + 17], 0x0000007fU), 23);
        out[c + 3] |= shl_32(band_32(in[w + 18], 0x0000007fU), 30);
        out[c + 4]  = bor_32(shl_32(band_32(in[w + 19], 0x0000007fU),  5), shr_32(band_32(in[w + 18], 0x0000007fU), 2));
        out[c + 4] |= shl_32(band_32(in[w + 20], 0x0000007fU), 12);
        out[c + 4] |= shl_32(band_32(in[w + 21], 0x0000007fU), 19);
        out[c + 4] |= shl_32(band_32(in[w + 22], 0x0000007fU), 26);
        out[c + 5]  = bor_32(shl_32(band_32(in[w + 23], 0x0000007fU),  1), shr_32(band_32(in[w + 22], 0x0000007fU), 6));
        out[c + 5] |= shl_32(band_32(in[w + 24], 0x0000007fU),  8);
        out[c + 5] |= shl_32(band_32(in[w + 25], 0x0000007fU), 15);
        out[c + 5] |= shl_32(band_32(in[w + 26], 0x0000007fU), 22);
        out[c + 5] |= shl_32(band_32(in[w + 27], 0x0000007fU), 29);
        out[c + 6]  = bor_32(shl_32(band_32(in[w + 28], 0x0000007fU),  4), shr_32(band_32(in[w + 27], 0x0000007fU), 3));
        out[c + 6] |= shl_32(band_32(in[w + 29], 0x0000007fU), 11);
        out[c + 6] |= shl_32(band_32(in[w + 30], 0x0000007fU), 18);
        out[c + 6] |= shl_32(band_32(in[w + 31], 0x0000007fU), 25);
    }
}

void
pack_32_into_8_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 4) {
        out[c + 0]  = shl_32(band_32(in[w + 0], 0x000000ffU),  0);
        out[c + 0] |= shl_32(band_32(in[w + 1], 0x000000ffU),  8);
        out[c + 0] |= shl_32(band_32(in[w + 2], 0x000000ffU), 16);
        out[c + 0] |= shl_32(band_32(in[w + 3], 0x000000ffU), 24);
    }
}

void
pack_32_into_9_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 9, w += 32) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x000001ffU),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x000001ffU),  9);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x000001ffU), 18);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x000001ffU), 27);
        out[c + 1]  = bor_32(shl_32(band_32(in[w +  4], 0x000001ffU),  4), shr_32(band_32(in[w +  3], 0x000001ffU), 5));
        out[c + 1] |= shl_32(band_32(in[w +  5], 0x000001ffU), 13);
        out[c + 1] |= shl_32(band_32(in[w +  6], 0x000001ffU), 22);
        out[c + 1] |= shl_32(band_32(in[w +  7], 0x000001ffU), 31);
        out[c + 2]  = bor_32(shl_32(band_32(in[w +  8], 0x000001ffU),  8), shr_32(band_32(in[w +  7], 0x000001ffU), 1));
        out[c + 2] |= shl_32(band_32(in[w +  9], 0x000001ffU), 17);
        out[c + 2] |= shl_32(band_32(in[w + 10], 0x000001ffU), 26);
        out[c + 3]  = bor_32(shl_32(band_32(in[w + 11], 0x000001ffU),  3), shr_32(band_32(in[w + 10], 0x000001ffU), 6));
        out[c + 3] |= shl_32(band_32(in[w + 12], 0x000001ffU), 12);
        out[c + 3] |= shl_32(band_32(in[w + 13], 0x000001ffU), 21);
        out[c + 3] |= shl_32(band_32(in[w + 14], 0x000001ffU), 30);
        out[c + 4]  = bor_32(shl_32(band_32(in[w + 15], 0x000001ffU),  7), shr_32(band_32(in[w + 14], 0x000001ffU), 2));
        out[c + 4] |= shl_32(band_32(in[w + 16], 0x000001ffU), 16);
        out[c + 4] |= shl_32(band_32(in[w + 17], 0x000001ffU), 25);
        out[c + 5]  = bor_32(shl_32(band_32(in[w + 18], 0x000001ffU),  2), shr_32(band_32(in[w + 17], 0x000001ffU), 7));
        out[c + 5] |= shl_32(band_32(in[w + 19], 0x000001ffU), 11);
        out[c + 5] |= shl_32(band_32(in[w + 20], 0x000001ffU), 20);
        out[c + 5] |= shl_32(band_32(in[w + 21], 0x000001ffU), 29);
        out[c + 6]  = bor_32(shl_32(band_32(in[w + 22], 0x000001ffU),  6), shr_32(band_32(in[w + 21], 0x000001ffU), 3));
        out[c + 6] |= shl_32(band_32(in[w + 23], 0x000001ffU), 15);
        out[c + 6] |= shl_32(band_32(in[w + 24], 0x000001ffU), 24);
        out[c + 7]  = bor_32(shl_32(band_32(in[w + 25], 0x000001ffU),  1), shr_32(band_32(in[w + 24], 0x000001ffU), 8));
        out[c + 7] |= shl_32(band_32(in[w + 26], 0x000001ffU), 10);
        out[c + 7] |= shl_32(band_32(in[w + 27], 0x000001ffU), 19);
        out[c + 7] |= shl_32(band_32(in[w + 28], 0x000001ffU), 28);
        out[c + 8]  = bor_32(shl_32(band_32(in[w + 29], 0x000001ffU),  5), shr_32(band_32(in[w + 28], 0x000001ffU), 4));
        out[c + 8] |= shl_32(band_32(in[w + 30], 0x000001ffU), 14);
        out[c + 8] |= shl_32(band_32(in[w + 31], 0x000001ffU), 23);
    }
}

void
pack_32_into_10_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 5, w += 16) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x000003ffU),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x000003ffU), 10);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x000003ffU), 20);
        out[c + 0] |= shl_32(band_32(in[w +  3], 0x000003ffU), 30);
        out[c + 1]  = bor_32(shl_32(band_32(in[w +  4], 0x000003ffU),  8), shr_32(band_32(in[w +  3], 0x000003ffU), 2));
        out[c + 1] |= shl_32(band_32(in[w +  5], 0x000003ffU), 18);
        out[c + 1] |= shl_32(band_32(in[w +  6], 0x000003ffU), 28);
        out[c + 2]  = bor_32(shl_32(band_32(in[w +  7], 0x000003ffU),  6), shr_32(band_32(in[w +  6], 0x000003ffU), 4));
        out[c + 2] |= shl_32(band_32(in[w +  8], 0x000003ffU), 16);
        out[c + 2] |= shl_32(band_32(in[w +  9], 0x000003ffU), 26);
        out[c + 3]  = bor_32(shl_32(band_32(in[w + 10], 0x000003ffU),  4), shr_32(band_32(in[w +  9], 0x000003ffU), 6));
        out[c + 3] |= shl_32(band_32(in[w + 11], 0x000003ffU), 14);
        out[c + 3] |= shl_32(band_32(in[w + 12], 0x000003ffU), 24);
        out[c + 4]  = bor_32(shl_32(band_32(in[w + 13], 0x000003ffU),  2), shr_32(band_32(in[w + 12], 0x000003ffU), 8));
        out[c + 4] |= shl_32(band_32(in[w + 14], 0x000003ffU), 12);
        out[c + 4] |= shl_32(band_32(in[w + 15], 0x000003ffU), 22);
    }
}

void
pack_32_into_11_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 11, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x000007ffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x000007ffU), 11);
        out[c +  0] |= shl_32(band_32(in[w +  2], 0x000007ffU), 22);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  3], 0x000007ffU),  1), shr_32(band_32(in[w +  2], 0x000007ffU), 10));
        out[c +  1] |= shl_32(band_32(in[w +  4], 0x000007ffU), 12);
        out[c +  1] |= shl_32(band_32(in[w +  5], 0x000007ffU), 23);
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  6], 0x000007ffU),  2), shr_32(band_32(in[w +  5], 0x000007ffU), 9));
        out[c +  2] |= shl_32(band_32(in[w +  7], 0x000007ffU), 13);
        out[c +  2] |= shl_32(band_32(in[w +  8], 0x000007ffU), 24);
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  9], 0x000007ffU),  3), shr_32(band_32(in[w +  8], 0x000007ffU), 8));
        out[c +  3] |= shl_32(band_32(in[w + 10], 0x000007ffU), 14);
        out[c +  3] |= shl_32(band_32(in[w + 11], 0x000007ffU), 25);
        out[c +  4]  = bor_32(shl_32(band_32(in[w + 12], 0x000007ffU),  4), shr_32(band_32(in[w + 11], 0x000007ffU), 7));
        out[c +  4] |= shl_32(band_32(in[w + 13], 0x000007ffU), 15);
        out[c +  4] |= shl_32(band_32(in[w + 14], 0x000007ffU), 26);
        out[c +  5]  = bor_32(shl_32(band_32(in[w + 15], 0x000007ffU),  5), shr_32(band_32(in[w + 14], 0x000007ffU), 6));
        out[c +  5] |= shl_32(band_32(in[w + 16], 0x000007ffU), 16);
        out[c +  5] |= shl_32(band_32(in[w + 17], 0x000007ffU), 27);
        out[c +  6]  = bor_32(shl_32(band_32(in[w + 18], 0x000007ffU),  6), shr_32(band_32(in[w + 17], 0x000007ffU), 5));
        out[c +  6] |= shl_32(band_32(in[w + 19], 0x000007ffU), 17);
        out[c +  6] |= shl_32(band_32(in[w + 20], 0x000007ffU), 28);
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 21], 0x000007ffU),  7), shr_32(band_32(in[w + 20], 0x000007ffU), 4));
        out[c +  7] |= shl_32(band_32(in[w + 22], 0x000007ffU), 18);
        out[c +  7] |= shl_32(band_32(in[w + 23], 0x000007ffU), 29);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 24], 0x000007ffU),  8), shr_32(band_32(in[w + 23], 0x000007ffU), 3));
        out[c +  8] |= shl_32(band_32(in[w + 25], 0x000007ffU), 19);
        out[c +  8] |= shl_32(band_32(in[w + 26], 0x000007ffU), 30);
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 27], 0x000007ffU),  9), shr_32(band_32(in[w + 26], 0x000007ffU), 2));
        out[c +  9] |= shl_32(band_32(in[w + 28], 0x000007ffU), 20);
        out[c +  9] |= shl_32(band_32(in[w + 29], 0x000007ffU), 31);
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 30], 0x000007ffU), 10), shr_32(band_32(in[w + 29], 0x000007ffU), 1));
        out[c + 10] |= shl_32(band_32(in[w + 31], 0x000007ffU), 21);
    }
}

void
pack_32_into_12_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 3, w += 8) {
        out[c + 0]  = shl_32(band_32(in[w + 0], 0x00000fffU),  0);
        out[c + 0] |= shl_32(band_32(in[w + 1], 0x00000fffU), 12);
        out[c + 0] |= shl_32(band_32(in[w + 2], 0x00000fffU), 24);
        out[c + 1]  = bor_32(shl_32(band_32(in[w + 3], 0x00000fffU),  4), shr_32(band_32(in[w + 2], 0x00000fffU), 8));
        out[c + 1] |= shl_32(band_32(in[w + 4], 0x00000fffU), 16);
        out[c + 1] |= shl_32(band_32(in[w + 5], 0x00000fffU), 28);
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 6], 0x00000fffU),  8), shr_32(band_32(in[w + 5], 0x00000fffU), 4));
        out[c + 2] |= shl_32(band_32(in[w + 7], 0x00000fffU), 20);
    }
}

void
pack_32_into_13_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 13, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x00001fffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x00001fffU), 13);
        out[c +  0] |= shl_32(band_32(in[w +  2], 0x00001fffU), 26);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  3], 0x00001fffU),  7), shr_32(band_32(in[w +  2], 0x00001fffU), 6));
        out[c +  1] |= shl_32(band_32(in[w +  4], 0x00001fffU), 20);
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  5], 0x00001fffU),  1), shr_32(band_32(in[w +  4], 0x00001fffU), 12));
        out[c +  2] |= shl_32(band_32(in[w +  6], 0x00001fffU), 14);
        out[c +  2] |= shl_32(band_32(in[w +  7], 0x00001fffU), 27);
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  8], 0x00001fffU),  8), shr_32(band_32(in[w +  7], 0x00001fffU), 5));
        out[c +  3] |= shl_32(band_32(in[w +  9], 0x00001fffU), 21);
        out[c +  4]  = bor_32(shl_32(band_32(in[w + 10], 0x00001fffU),  2), shr_32(band_32(in[w +  9], 0x00001fffU), 11));
        out[c +  4] |= shl_32(band_32(in[w + 11], 0x00001fffU), 15);
        out[c +  4] |= shl_32(band_32(in[w + 12], 0x00001fffU), 28);
        out[c +  5]  = bor_32(shl_32(band_32(in[w + 13], 0x00001fffU),  9), shr_32(band_32(in[w + 12], 0x00001fffU), 4));
        out[c +  5] |= shl_32(band_32(in[w + 14], 0x00001fffU), 22);
        out[c +  6]  = bor_32(shl_32(band_32(in[w + 15], 0x00001fffU),  3), shr_32(band_32(in[w + 14], 0x00001fffU), 10));
        out[c +  6] |= shl_32(band_32(in[w + 16], 0x00001fffU), 16);
        out[c +  6] |= shl_32(band_32(in[w + 17], 0x00001fffU), 29);
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 18], 0x00001fffU), 10), shr_32(band_32(in[w + 17], 0x00001fffU), 3));
        out[c +  7] |= shl_32(band_32(in[w + 19], 0x00001fffU), 23);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 20], 0x00001fffU),  4), shr_32(band_32(in[w + 19], 0x00001fffU), 9));
        out[c +  8] |= shl_32(band_32(in[w + 21], 0x00001fffU), 17);
        out[c +  8] |= shl_32(band_32(in[w + 22], 0x00001fffU), 30);
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 23], 0x00001fffU), 11), shr_32(band_32(in[w + 22], 0x00001fffU), 2));
        out[c +  9] |= shl_32(band_32(in[w + 24], 0x00001fffU), 24);
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 25], 0x00001fffU),  5), shr_32(band_32(in[w + 24], 0x00001fffU), 8));
        out[c + 10] |= shl_32(band_32(in[w + 26], 0x00001fffU), 18);
        out[c + 10] |= shl_32(band_32(in[w + 27], 0x00001fffU), 31);
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 28], 0x00001fffU), 12), shr_32(band_32(in[w + 27], 0x00001fffU), 1));
        out[c + 11] |= shl_32(band_32(in[w + 29], 0x00001fffU), 25);
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 30], 0x00001fffU),  6), shr_32(band_32(in[w + 29], 0x00001fffU), 7));
        out[c + 12] |= shl_32(band_32(in[w + 31], 0x00001fffU), 19);
    }
}

void
pack_32_into_14_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 7, w += 16) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x00003fffU),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x00003fffU), 14);
        out[c + 0] |= shl_32(band_32(in[w +  2], 0x00003fffU), 28);
        out[c + 1]  = bor_32(shl_32(band_32(in[w +  3], 0x00003fffU), 10), shr_32(band_32(in[w +  2], 0x00003fffU), 4));
        out[c + 1] |= shl_32(band_32(in[w +  4], 0x00003fffU), 24);
        out[c + 2]  = bor_32(shl_32(band_32(in[w +  5], 0x00003fffU),  6), shr_32(band_32(in[w +  4], 0x00003fffU), 8));
        out[c + 2] |= shl_32(band_32(in[w +  6], 0x00003fffU), 20);
        out[c + 3]  = bor_32(shl_32(band_32(in[w +  7], 0x00003fffU),  2), shr_32(band_32(in[w +  6], 0x00003fffU), 12));
        out[c + 3] |= shl_32(band_32(in[w +  8], 0x00003fffU), 16);
        out[c + 3] |= shl_32(band_32(in[w +  9], 0x00003fffU), 30);
        out[c + 4]  = bor_32(shl_32(band_32(in[w + 10], 0x00003fffU), 12), shr_32(band_32(in[w +  9], 0x00003fffU), 2));
        out[c + 4] |= shl_32(band_32(in[w + 11], 0x00003fffU), 26);
        out[c + 5]  = bor_32(shl_32(band_32(in[w + 12], 0x00003fffU),  8), shr_32(band_32(in[w + 11], 0x00003fffU), 6));
        out[c + 5] |= shl_32(band_32(in[w + 13], 0x00003fffU), 22);
        out[c + 6]  = bor_32(shl_32(band_32(in[w + 14], 0x00003fffU),  4), shr_32(band_32(in[w + 13], 0x00003fffU), 10));
        out[c + 6] |= shl_32(band_32(in[w + 15], 0x00003fffU), 18);
    }
}

void
pack_32_into_15_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 15, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x00007fffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x00007fffU), 15);
        out[c +  0] |= shl_32(band_32(in[w +  2], 0x00007fffU), 30);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  3], 0x00007fffU), 13), shr_32(band_32(in[w +  2], 0x00007fffU), 2));
        out[c +  1] |= shl_32(band_32(in[w +  4], 0x00007fffU), 28);
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  5], 0x00007fffU), 11), shr_32(band_32(in[w +  4], 0x00007fffU), 4));
        out[c +  2] |= shl_32(band_32(in[w +  6], 0x00007fffU), 26);
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  7], 0x00007fffU),  9), shr_32(band_32(in[w +  6], 0x00007fffU), 6));
        out[c +  3] |= shl_32(band_32(in[w +  8], 0x00007fffU), 24);
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  9], 0x00007fffU),  7), shr_32(band_32(in[w +  8], 0x00007fffU), 8));
        out[c +  4] |= shl_32(band_32(in[w + 10], 0x00007fffU), 22);
        out[c +  5]  = bor_32(shl_32(band_32(in[w + 11], 0x00007fffU),  5), shr_32(band_32(in[w + 10], 0x00007fffU), 10));
        out[c +  5] |= shl_32(band_32(in[w + 12], 0x00007fffU), 20);
        out[c +  6]  = bor_32(shl_32(band_32(in[w + 13], 0x00007fffU),  3), shr_32(band_32(in[w + 12], 0x00007fffU), 12));
        out[c +  6] |= shl_32(band_32(in[w + 14], 0x00007fffU), 18);
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 15], 0x00007fffU),  1), shr_32(band_32(in[w + 14], 0x00007fffU), 14));
        out[c +  7] |= shl_32(band_32(in[w + 16], 0x00007fffU), 16);
        out[c +  7] |= shl_32(band_32(in[w + 17], 0x00007fffU), 31);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 18], 0x00007fffU), 14), shr_32(band_32(in[w + 17], 0x00007fffU), 1));
        out[c +  8] |= shl_32(band_32(in[w + 19], 0x00007fffU), 29);
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 20], 0x00007fffU), 12), shr_32(band_32(in[w + 19], 0x00007fffU), 3));
        out[c +  9] |= shl_32(band_32(in[w + 21], 0x00007fffU), 27);
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 22], 0x00007fffU), 10), shr_32(band_32(in[w + 21], 0x00007fffU), 5));
        out[c + 10] |= shl_32(band_32(in[w + 23], 0x00007fffU), 25);
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 24], 0x00007fffU),  8), shr_32(band_32(in[w + 23], 0x00007fffU), 7));
        out[c + 11] |= shl_32(band_32(in[w + 25], 0x00007fffU), 23);
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 26], 0x00007fffU),  6), shr_32(band_32(in[w + 25], 0x00007fffU), 9));
        out[c + 12] |= shl_32(band_32(in[w + 27], 0x00007fffU), 21);
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 28], 0x00007fffU),  4), shr_32(band_32(in[w + 27], 0x00007fffU), 11));
        out[c + 13] |= shl_32(band_32(in[w + 29], 0x00007fffU), 19);
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 30], 0x00007fffU),  2), shr_32(band_32(in[w + 29], 0x00007fffU), 13));
        out[c + 14] |= shl_32(band_32(in[w + 31], 0x00007fffU), 17);
    }
}

void
pack_32_into_16_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 1, w += 2) {
        out[c + 0]  = shl_32(band_32(in[w + 0], 0x0000ffffU),  0);
        out[c + 0] |= shl_32(band_32(in[w + 1], 0x0000ffffU), 16);
    }
}

void
pack_32_into_17_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 17, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x0001ffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x0001ffffU), 17);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x0001ffffU),  2), shr_32(band_32(in[w +  1], 0x0001ffffU), 15));
        out[c +  1] |= shl_32(band_32(in[w +  3], 0x0001ffffU), 19);
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  4], 0x0001ffffU),  4), shr_32(band_32(in[w +  3], 0x0001ffffU), 13));
        out[c +  2] |= shl_32(band_32(in[w +  5], 0x0001ffffU), 21);
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  6], 0x0001ffffU),  6), shr_32(band_32(in[w +  5], 0x0001ffffU), 11));
        out[c +  3] |= shl_32(band_32(in[w +  7], 0x0001ffffU), 23);
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  8], 0x0001ffffU),  8), shr_32(band_32(in[w +  7], 0x0001ffffU), 9));
        out[c +  4] |= shl_32(band_32(in[w +  9], 0x0001ffffU), 25);
        out[c +  5]  = bor_32(shl_32(band_32(in[w + 10], 0x0001ffffU), 10), shr_32(band_32(in[w +  9], 0x0001ffffU), 7));
        out[c +  5] |= shl_32(band_32(in[w + 11], 0x0001ffffU), 27);
        out[c +  6]  = bor_32(shl_32(band_32(in[w + 12], 0x0001ffffU), 12), shr_32(band_32(in[w + 11], 0x0001ffffU), 5));
        out[c +  6] |= shl_32(band_32(in[w + 13], 0x0001ffffU), 29);
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 14], 0x0001ffffU), 14), shr_32(band_32(in[w + 13], 0x0001ffffU), 3));
        out[c +  7] |= shl_32(band_32(in[w + 15], 0x0001ffffU), 31);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 16], 0x0001ffffU), 16), shr_32(band_32(in[w + 15], 0x0001ffffU), 1));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 17], 0x0001ffffU),  1), shr_32(band_32(in[w + 16], 0x0001ffffU), 16));
        out[c +  9] |= shl_32(band_32(in[w + 18], 0x0001ffffU), 18);
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 19], 0x0001ffffU),  3), shr_32(band_32(in[w + 18], 0x0001ffffU), 14));
        out[c + 10] |= shl_32(band_32(in[w + 20], 0x0001ffffU), 20);
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 21], 0x0001ffffU),  5), shr_32(band_32(in[w + 20], 0x0001ffffU), 12));
        out[c + 11] |= shl_32(band_32(in[w + 22], 0x0001ffffU), 22);
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 23], 0x0001ffffU),  7), shr_32(band_32(in[w + 22], 0x0001ffffU), 10));
        out[c + 12] |= shl_32(band_32(in[w + 24], 0x0001ffffU), 24);
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 25], 0x0001ffffU),  9), shr_32(band_32(in[w + 24], 0x0001ffffU), 8));
        out[c + 13] |= shl_32(band_32(in[w + 26], 0x0001ffffU), 26);
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 27], 0x0001ffffU), 11), shr_32(band_32(in[w + 26], 0x0001ffffU), 6));
        out[c + 14] |= shl_32(band_32(in[w + 28], 0x0001ffffU), 28);
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 29], 0x0001ffffU), 13), shr_32(band_32(in[w + 28], 0x0001ffffU), 4));
        out[c + 15] |= shl_32(band_32(in[w + 30], 0x0001ffffU), 30);
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 31], 0x0001ffffU), 15), shr_32(band_32(in[w + 30], 0x0001ffffU), 2));
    }
}

void
pack_32_into_18_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 9, w += 16) {
        out[c + 0]  = shl_32(band_32(in[w +  0], 0x0003ffffU),  0);
        out[c + 0] |= shl_32(band_32(in[w +  1], 0x0003ffffU), 18);
        out[c + 1]  = bor_32(shl_32(band_32(in[w +  2], 0x0003ffffU),  4), shr_32(band_32(in[w +  1], 0x0003ffffU), 14));
        out[c + 1] |= shl_32(band_32(in[w +  3], 0x0003ffffU), 22);
        out[c + 2]  = bor_32(shl_32(band_32(in[w +  4], 0x0003ffffU),  8), shr_32(band_32(in[w +  3], 0x0003ffffU), 10));
        out[c + 2] |= shl_32(band_32(in[w +  5], 0x0003ffffU), 26);
        out[c + 3]  = bor_32(shl_32(band_32(in[w +  6], 0x0003ffffU), 12), shr_32(band_32(in[w +  5], 0x0003ffffU), 6));
        out[c + 3] |= shl_32(band_32(in[w +  7], 0x0003ffffU), 30);
        out[c + 4]  = bor_32(shl_32(band_32(in[w +  8], 0x0003ffffU), 16), shr_32(band_32(in[w +  7], 0x0003ffffU), 2));
        out[c + 5]  = bor_32(shl_32(band_32(in[w +  9], 0x0003ffffU),  2), shr_32(band_32(in[w +  8], 0x0003ffffU), 16));
        out[c + 5] |= shl_32(band_32(in[w + 10], 0x0003ffffU), 20);
        out[c + 6]  = bor_32(shl_32(band_32(in[w + 11], 0x0003ffffU),  6), shr_32(band_32(in[w + 10], 0x0003ffffU), 12));
        out[c + 6] |= shl_32(band_32(in[w + 12], 0x0003ffffU), 24);
        out[c + 7]  = bor_32(shl_32(band_32(in[w + 13], 0x0003ffffU), 10), shr_32(band_32(in[w + 12], 0x0003ffffU), 8));
        out[c + 7] |= shl_32(band_32(in[w + 14], 0x0003ffffU), 28);
        out[c + 8]  = bor_32(shl_32(band_32(in[w + 15], 0x0003ffffU), 14), shr_32(band_32(in[w + 14], 0x0003ffffU), 4));
    }
}

void
pack_32_into_19_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 19, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x0007ffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x0007ffffU), 19);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x0007ffffU),  6), shr_32(band_32(in[w +  1], 0x0007ffffU), 13));
        out[c +  1] |= shl_32(band_32(in[w +  3], 0x0007ffffU), 25);
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  4], 0x0007ffffU), 12), shr_32(band_32(in[w +  3], 0x0007ffffU), 7));
        out[c +  2] |= shl_32(band_32(in[w +  5], 0x0007ffffU), 31);
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  6], 0x0007ffffU), 18), shr_32(band_32(in[w +  5], 0x0007ffffU), 1));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  7], 0x0007ffffU),  5), shr_32(band_32(in[w +  6], 0x0007ffffU), 14));
        out[c +  4] |= shl_32(band_32(in[w +  8], 0x0007ffffU), 24);
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  9], 0x0007ffffU), 11), shr_32(band_32(in[w +  8], 0x0007ffffU), 8));
        out[c +  5] |= shl_32(band_32(in[w + 10], 0x0007ffffU), 30);
        out[c +  6]  = bor_32(shl_32(band_32(in[w + 11], 0x0007ffffU), 17), shr_32(band_32(in[w + 10], 0x0007ffffU), 2));
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 12], 0x0007ffffU),  4), shr_32(band_32(in[w + 11], 0x0007ffffU), 15));
        out[c +  7] |= shl_32(band_32(in[w + 13], 0x0007ffffU), 23);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 14], 0x0007ffffU), 10), shr_32(band_32(in[w + 13], 0x0007ffffU), 9));
        out[c +  8] |= shl_32(band_32(in[w + 15], 0x0007ffffU), 29);
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 16], 0x0007ffffU), 16), shr_32(band_32(in[w + 15], 0x0007ffffU), 3));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 17], 0x0007ffffU),  3), shr_32(band_32(in[w + 16], 0x0007ffffU), 16));
        out[c + 10] |= shl_32(band_32(in[w + 18], 0x0007ffffU), 22);
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 19], 0x0007ffffU),  9), shr_32(band_32(in[w + 18], 0x0007ffffU), 10));
        out[c + 11] |= shl_32(band_32(in[w + 20], 0x0007ffffU), 28);
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 21], 0x0007ffffU), 15), shr_32(band_32(in[w + 20], 0x0007ffffU), 4));
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 22], 0x0007ffffU),  2), shr_32(band_32(in[w + 21], 0x0007ffffU), 17));
        out[c + 13] |= shl_32(band_32(in[w + 23], 0x0007ffffU), 21);
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 24], 0x0007ffffU),  8), shr_32(band_32(in[w + 23], 0x0007ffffU), 11));
        out[c + 14] |= shl_32(band_32(in[w + 25], 0x0007ffffU), 27);
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 26], 0x0007ffffU), 14), shr_32(band_32(in[w + 25], 0x0007ffffU), 5));
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 27], 0x0007ffffU),  1), shr_32(band_32(in[w + 26], 0x0007ffffU), 18));
        out[c + 16] |= shl_32(band_32(in[w + 28], 0x0007ffffU), 20);
        out[c + 17]  = bor_32(shl_32(band_32(in[w + 29], 0x0007ffffU),  7), shr_32(band_32(in[w + 28], 0x0007ffffU), 12));
        out[c + 17] |= shl_32(band_32(in[w + 30], 0x0007ffffU), 26);
        out[c + 18]  = bor_32(shl_32(band_32(in[w + 31], 0x0007ffffU), 13), shr_32(band_32(in[w + 30], 0x0007ffffU), 6));
    }
}

void
pack_32_into_20_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 5, w += 8) {
        out[c + 0]  = shl_32(band_32(in[w + 0], 0x000fffffU),  0);
        out[c + 0] |= shl_32(band_32(in[w + 1], 0x000fffffU), 20);
        out[c + 1]  = bor_32(shl_32(band_32(in[w + 2], 0x000fffffU),  8), shr_32(band_32(in[w + 1], 0x000fffffU), 12));
        out[c + 1] |= shl_32(band_32(in[w + 3], 0x000fffffU), 28);
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 4], 0x000fffffU), 16), shr_32(band_32(in[w + 3], 0x000fffffU), 4));
        out[c + 3]  = bor_32(shl_32(band_32(in[w + 5], 0x000fffffU),  4), shr_32(band_32(in[w + 4], 0x000fffffU), 16));
        out[c + 3] |= shl_32(band_32(in[w + 6], 0x000fffffU), 24);
        out[c + 4]  = bor_32(shl_32(band_32(in[w + 7], 0x000fffffU), 12), shr_32(band_32(in[w + 6], 0x000fffffU), 8));
    }
}

void
pack_32_into_21_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 21, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x001fffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x001fffffU), 21);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x001fffffU), 10), shr_32(band_32(in[w +  1], 0x001fffffU), 11));
        out[c +  1] |= shl_32(band_32(in[w +  3], 0x001fffffU), 31);
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  4], 0x001fffffU), 20), shr_32(band_32(in[w +  3], 0x001fffffU), 1));
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  5], 0x001fffffU),  9), shr_32(band_32(in[w +  4], 0x001fffffU), 12));
        out[c +  3] |= shl_32(band_32(in[w +  6], 0x001fffffU), 30);
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  7], 0x001fffffU), 19), shr_32(band_32(in[w +  6], 0x001fffffU), 2));
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  8], 0x001fffffU),  8), shr_32(band_32(in[w +  7], 0x001fffffU), 13));
        out[c +  5] |= shl_32(band_32(in[w +  9], 0x001fffffU), 29);
        out[c +  6]  = bor_32(shl_32(band_32(in[w + 10], 0x001fffffU), 18), shr_32(band_32(in[w +  9], 0x001fffffU), 3));
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 11], 0x001fffffU),  7), shr_32(band_32(in[w + 10], 0x001fffffU), 14));
        out[c +  7] |= shl_32(band_32(in[w + 12], 0x001fffffU), 28);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 13], 0x001fffffU), 17), shr_32(band_32(in[w + 12], 0x001fffffU), 4));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 14], 0x001fffffU),  6), shr_32(band_32(in[w + 13], 0x001fffffU), 15));
        out[c +  9] |= shl_32(band_32(in[w + 15], 0x001fffffU), 27);
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 16], 0x001fffffU), 16), shr_32(band_32(in[w + 15], 0x001fffffU), 5));
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 17], 0x001fffffU),  5), shr_32(band_32(in[w + 16], 0x001fffffU), 16));
        out[c + 11] |= shl_32(band_32(in[w + 18], 0x001fffffU), 26);
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 19], 0x001fffffU), 15), shr_32(band_32(in[w + 18], 0x001fffffU), 6));
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 20], 0x001fffffU),  4), shr_32(band_32(in[w + 19], 0x001fffffU), 17));
        out[c + 13] |= shl_32(band_32(in[w + 21], 0x001fffffU), 25);
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 22], 0x001fffffU), 14), shr_32(band_32(in[w + 21], 0x001fffffU), 7));
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 23], 0x001fffffU),  3), shr_32(band_32(in[w + 22], 0x001fffffU), 18));
        out[c + 15] |= shl_32(band_32(in[w + 24], 0x001fffffU), 24);
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 25], 0x001fffffU), 13), shr_32(band_32(in[w + 24], 0x001fffffU), 8));
        out[c + 17]  = bor_32(shl_32(band_32(in[w + 26], 0x001fffffU),  2), shr_32(band_32(in[w + 25], 0x001fffffU), 19));
        out[c + 17] |= shl_32(band_32(in[w + 27], 0x001fffffU), 23);
        out[c + 18]  = bor_32(shl_32(band_32(in[w + 28], 0x001fffffU), 12), shr_32(band_32(in[w + 27], 0x001fffffU), 9));
        out[c + 19]  = bor_32(shl_32(band_32(in[w + 29], 0x001fffffU),  1), shr_32(band_32(in[w + 28], 0x001fffffU), 20));
        out[c + 19] |= shl_32(band_32(in[w + 30], 0x001fffffU), 22);
        out[c + 20]  = bor_32(shl_32(band_32(in[w + 31], 0x001fffffU), 11), shr_32(band_32(in[w + 30], 0x001fffffU), 10));
    }
}

void
pack_32_into_22_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 11, w += 16) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x003fffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x003fffffU), 22);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x003fffffU), 12), shr_32(band_32(in[w +  1], 0x003fffffU), 10));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x003fffffU),  2), shr_32(band_32(in[w +  2], 0x003fffffU), 20));
        out[c +  2] |= shl_32(band_32(in[w +  4], 0x003fffffU), 24);
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  5], 0x003fffffU), 14), shr_32(band_32(in[w +  4], 0x003fffffU), 8));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  6], 0x003fffffU),  4), shr_32(band_32(in[w +  5], 0x003fffffU), 18));
        out[c +  4] |= shl_32(band_32(in[w +  7], 0x003fffffU), 26);
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  8], 0x003fffffU), 16), shr_32(band_32(in[w +  7], 0x003fffffU), 6));
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  9], 0x003fffffU),  6), shr_32(band_32(in[w +  8], 0x003fffffU), 16));
        out[c +  6] |= shl_32(band_32(in[w + 10], 0x003fffffU), 28);
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 11], 0x003fffffU), 18), shr_32(band_32(in[w + 10], 0x003fffffU), 4));
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 12], 0x003fffffU),  8), shr_32(band_32(in[w + 11], 0x003fffffU), 14));
        out[c +  8] |= shl_32(band_32(in[w + 13], 0x003fffffU), 30);
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 14], 0x003fffffU), 20), shr_32(band_32(in[w + 13], 0x003fffffU), 2));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 15], 0x003fffffU), 10), shr_32(band_32(in[w + 14], 0x003fffffU), 12));
    }
}

void
pack_32_into_23_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 23, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x007fffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x007fffffU), 23);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x007fffffU), 14), shr_32(band_32(in[w +  1], 0x007fffffU), 9));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x007fffffU),  5), shr_32(band_32(in[w +  2], 0x007fffffU), 18));
        out[c +  2] |= shl_32(band_32(in[w +  4], 0x007fffffU), 28);
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  5], 0x007fffffU), 19), shr_32(band_32(in[w +  4], 0x007fffffU), 4));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  6], 0x007fffffU), 10), shr_32(band_32(in[w +  5], 0x007fffffU), 13));
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  7], 0x007fffffU),  1), shr_32(band_32(in[w +  6], 0x007fffffU), 22));
        out[c +  5] |= shl_32(band_32(in[w +  8], 0x007fffffU), 24);
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  9], 0x007fffffU), 15), shr_32(band_32(in[w +  8], 0x007fffffU), 8));
        out[c +  7]  = bor_32(shl_32(band_32(in[w + 10], 0x007fffffU),  6), shr_32(band_32(in[w +  9], 0x007fffffU), 17));
        out[c +  7] |= shl_32(band_32(in[w + 11], 0x007fffffU), 29);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 12], 0x007fffffU), 20), shr_32(band_32(in[w + 11], 0x007fffffU), 3));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 13], 0x007fffffU), 11), shr_32(band_32(in[w + 12], 0x007fffffU), 12));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 14], 0x007fffffU),  2), shr_32(band_32(in[w + 13], 0x007fffffU), 21));
        out[c + 10] |= shl_32(band_32(in[w + 15], 0x007fffffU), 25);
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 16], 0x007fffffU), 16), shr_32(band_32(in[w + 15], 0x007fffffU), 7));
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 17], 0x007fffffU),  7), shr_32(band_32(in[w + 16], 0x007fffffU), 16));
        out[c + 12] |= shl_32(band_32(in[w + 18], 0x007fffffU), 30);
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 19], 0x007fffffU), 21), shr_32(band_32(in[w + 18], 0x007fffffU), 2));
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 20], 0x007fffffU), 12), shr_32(band_32(in[w + 19], 0x007fffffU), 11));
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 21], 0x007fffffU),  3), shr_32(band_32(in[w + 20], 0x007fffffU), 20));
        out[c + 15] |= shl_32(band_32(in[w + 22], 0x007fffffU), 26);
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 23], 0x007fffffU), 17), shr_32(band_32(in[w + 22], 0x007fffffU), 6));
        out[c + 17]  = bor_32(shl_32(band_32(in[w + 24], 0x007fffffU),  8), shr_32(band_32(in[w + 23], 0x007fffffU), 15));
        out[c + 17] |= shl_32(band_32(in[w + 25], 0x007fffffU), 31);
        out[c + 18]  = bor_32(shl_32(band_32(in[w + 26], 0x007fffffU), 22), shr_32(band_32(in[w + 25], 0x007fffffU), 1));
        out[c + 19]  = bor_32(shl_32(band_32(in[w + 27], 0x007fffffU), 13), shr_32(band_32(in[w + 26], 0x007fffffU), 10));
        out[c + 20]  = bor_32(shl_32(band_32(in[w + 28], 0x007fffffU),  4), shr_32(band_32(in[w + 27], 0x007fffffU), 19));
        out[c + 20] |= shl_32(band_32(in[w + 29], 0x007fffffU), 27);
        out[c + 21]  = bor_32(shl_32(band_32(in[w + 30], 0x007fffffU), 18), shr_32(band_32(in[w + 29], 0x007fffffU), 5));
        out[c + 22]  = bor_32(shl_32(band_32(in[w + 31], 0x007fffffU),  9), shr_32(band_32(in[w + 30], 0x007fffffU), 14));
    }
}

void
pack_32_into_24_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 3, w += 4) {
        out[c + 0]  = shl_32(band_32(in[w + 0], 0x00ffffffU),  0);
        out[c + 0] |= shl_32(band_32(in[w + 1], 0x00ffffffU), 24);
        out[c + 1]  = bor_32(shl_32(band_32(in[w + 2], 0x00ffffffU), 16), shr_32(band_32(in[w + 1], 0x00ffffffU), 8));
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 3], 0x00ffffffU),  8), shr_32(band_32(in[w + 2], 0x00ffffffU), 16));
    }
}

void
pack_32_into_25_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 25, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x01ffffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x01ffffffU), 25);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x01ffffffU), 18), shr_32(band_32(in[w +  1], 0x01ffffffU), 7));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x01ffffffU), 11), shr_32(band_32(in[w +  2], 0x01ffffffU), 14));
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  4], 0x01ffffffU),  4), shr_32(band_32(in[w +  3], 0x01ffffffU), 21));
        out[c +  3] |= shl_32(band_32(in[w +  5], 0x01ffffffU), 29);
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  6], 0x01ffffffU), 22), shr_32(band_32(in[w +  5], 0x01ffffffU), 3));
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  7], 0x01ffffffU), 15), shr_32(band_32(in[w +  6], 0x01ffffffU), 10));
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  8], 0x01ffffffU),  8), shr_32(band_32(in[w +  7], 0x01ffffffU), 17));
        out[c +  7]  = bor_32(shl_32(band_32(in[w +  9], 0x01ffffffU),  1), shr_32(band_32(in[w +  8], 0x01ffffffU), 24));
        out[c +  7] |= shl_32(band_32(in[w + 10], 0x01ffffffU), 26);
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 11], 0x01ffffffU), 19), shr_32(band_32(in[w + 10], 0x01ffffffU), 6));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 12], 0x01ffffffU), 12), shr_32(band_32(in[w + 11], 0x01ffffffU), 13));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 13], 0x01ffffffU),  5), shr_32(band_32(in[w + 12], 0x01ffffffU), 20));
        out[c + 10] |= shl_32(band_32(in[w + 14], 0x01ffffffU), 30);
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 15], 0x01ffffffU), 23), shr_32(band_32(in[w + 14], 0x01ffffffU), 2));
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 16], 0x01ffffffU), 16), shr_32(band_32(in[w + 15], 0x01ffffffU), 9));
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 17], 0x01ffffffU),  9), shr_32(band_32(in[w + 16], 0x01ffffffU), 16));
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 18], 0x01ffffffU),  2), shr_32(band_32(in[w + 17], 0x01ffffffU), 23));
        out[c + 14] |= shl_32(band_32(in[w + 19], 0x01ffffffU), 27);
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 20], 0x01ffffffU), 20), shr_32(band_32(in[w + 19], 0x01ffffffU), 5));
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 21], 0x01ffffffU), 13), shr_32(band_32(in[w + 20], 0x01ffffffU), 12));
        out[c + 17]  = bor_32(shl_32(band_32(in[w + 22], 0x01ffffffU),  6), shr_32(band_32(in[w + 21], 0x01ffffffU), 19));
        out[c + 17] |= shl_32(band_32(in[w + 23], 0x01ffffffU), 31);
        out[c + 18]  = bor_32(shl_32(band_32(in[w + 24], 0x01ffffffU), 24), shr_32(band_32(in[w + 23], 0x01ffffffU), 1));
        out[c + 19]  = bor_32(shl_32(band_32(in[w + 25], 0x01ffffffU), 17), shr_32(band_32(in[w + 24], 0x01ffffffU), 8));
        out[c + 20]  = bor_32(shl_32(band_32(in[w + 26], 0x01ffffffU), 10), shr_32(band_32(in[w + 25], 0x01ffffffU), 15));
        out[c + 21]  = bor_32(shl_32(band_32(in[w + 27], 0x01ffffffU),  3), shr_32(band_32(in[w + 26], 0x01ffffffU), 22));
        out[c + 21] |= shl_32(band_32(in[w + 28], 0x01ffffffU), 28);
        out[c + 22]  = bor_32(shl_32(band_32(in[w + 29], 0x01ffffffU), 21), shr_32(band_32(in[w + 28], 0x01ffffffU), 4));
        out[c + 23]  = bor_32(shl_32(band_32(in[w + 30], 0x01ffffffU), 14), shr_32(band_32(in[w + 29], 0x01ffffffU), 11));
        out[c + 24]  = bor_32(shl_32(band_32(in[w + 31], 0x01ffffffU),  7), shr_32(band_32(in[w + 30], 0x01ffffffU), 18));
    }
}

void
pack_32_into_26_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 13, w += 16) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x03ffffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x03ffffffU), 26);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x03ffffffU), 20), shr_32(band_32(in[w +  1], 0x03ffffffU), 6));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x03ffffffU), 14), shr_32(band_32(in[w +  2], 0x03ffffffU), 12));
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  4], 0x03ffffffU),  8), shr_32(band_32(in[w +  3], 0x03ffffffU), 18));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  5], 0x03ffffffU),  2), shr_32(band_32(in[w +  4], 0x03ffffffU), 24));
        out[c +  4] |= shl_32(band_32(in[w +  6], 0x03ffffffU), 28);
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  7], 0x03ffffffU), 22), shr_32(band_32(in[w +  6], 0x03ffffffU), 4));
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  8], 0x03ffffffU), 16), shr_32(band_32(in[w +  7], 0x03ffffffU), 10));
        out[c +  7]  = bor_32(shl_32(band_32(in[w +  9], 0x03ffffffU), 10), shr_32(band_32(in[w +  8], 0x03ffffffU), 16));
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 10], 0x03ffffffU),  4), shr_32(band_32(in[w +  9], 0x03ffffffU), 22));
        out[c +  8] |= shl_32(band_32(in[w + 11], 0x03ffffffU), 30);
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 12], 0x03ffffffU), 24), shr_32(band_32(in[w + 11], 0x03ffffffU), 2));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 13], 0x03ffffffU), 18), shr_32(band_32(in[w + 12], 0x03ffffffU), 8));
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 14], 0x03ffffffU), 12), shr_32(band_32(in[w + 13], 0x03ffffffU), 14));
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 15], 0x03ffffffU),  6), shr_32(band_32(in[w + 14], 0x03ffffffU), 20));
    }
}

void
pack_32_into_27_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 27, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x07ffffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x07ffffffU), 27);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x07ffffffU), 22), shr_32(band_32(in[w +  1], 0x07ffffffU), 5));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x07ffffffU), 17), shr_32(band_32(in[w +  2], 0x07ffffffU), 10));
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  4], 0x07ffffffU), 12), shr_32(band_32(in[w +  3], 0x07ffffffU), 15));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  5], 0x07ffffffU),  7), shr_32(band_32(in[w +  4], 0x07ffffffU), 20));
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  6], 0x07ffffffU),  2), shr_32(band_32(in[w +  5], 0x07ffffffU), 25));
        out[c +  5] |= shl_32(band_32(in[w +  7], 0x07ffffffU), 29);
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  8], 0x07ffffffU), 24), shr_32(band_32(in[w +  7], 0x07ffffffU), 3));
        out[c +  7]  = bor_32(shl_32(band_32(in[w +  9], 0x07ffffffU), 19), shr_32(band_32(in[w +  8], 0x07ffffffU), 8));
        out[c +  8]  = bor_32(shl_32(band_32(in[w + 10], 0x07ffffffU), 14), shr_32(band_32(in[w +  9], 0x07ffffffU), 13));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 11], 0x07ffffffU),  9), shr_32(band_32(in[w + 10], 0x07ffffffU), 18));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 12], 0x07ffffffU),  4), shr_32(band_32(in[w + 11], 0x07ffffffU), 23));
        out[c + 10] |= shl_32(band_32(in[w + 13], 0x07ffffffU), 31);
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 14], 0x07ffffffU), 26), shr_32(band_32(in[w + 13], 0x07ffffffU), 1));
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 15], 0x07ffffffU), 21), shr_32(band_32(in[w + 14], 0x07ffffffU), 6));
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 16], 0x07ffffffU), 16), shr_32(band_32(in[w + 15], 0x07ffffffU), 11));
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 17], 0x07ffffffU), 11), shr_32(band_32(in[w + 16], 0x07ffffffU), 16));
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 18], 0x07ffffffU),  6), shr_32(band_32(in[w + 17], 0x07ffffffU), 21));
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 19], 0x07ffffffU),  1), shr_32(band_32(in[w + 18], 0x07ffffffU), 26));
        out[c + 16] |= shl_32(band_32(in[w + 20], 0x07ffffffU), 28);
        out[c + 17]  = bor_32(shl_32(band_32(in[w + 21], 0x07ffffffU), 23), shr_32(band_32(in[w + 20], 0x07ffffffU), 4));
        out[c + 18]  = bor_32(shl_32(band_32(in[w + 22], 0x07ffffffU), 18), shr_32(band_32(in[w + 21], 0x07ffffffU), 9));
        out[c + 19]  = bor_32(shl_32(band_32(in[w + 23], 0x07ffffffU), 13), shr_32(band_32(in[w + 22], 0x07ffffffU), 14));
        out[c + 20]  = bor_32(shl_32(band_32(in[w + 24], 0x07ffffffU),  8), shr_32(band_32(in[w + 23], 0x07ffffffU), 19));
        out[c + 21]  = bor_32(shl_32(band_32(in[w + 25], 0x07ffffffU),  3), shr_32(band_32(in[w + 24], 0x07ffffffU), 24));
        out[c + 21] |= shl_32(band_32(in[w + 26], 0x07ffffffU), 30);
        out[c + 22]  = bor_32(shl_32(band_32(in[w + 27], 0x07ffffffU), 25), shr_32(band_32(in[w + 26], 0x07ffffffU), 2));
        out[c + 23]  = bor_32(shl_32(band_32(in[w + 28], 0x07ffffffU), 20), shr_32(band_32(in[w + 27], 0x07ffffffU), 7));
        out[c + 24]  = bor_32(shl_32(band_32(in[w + 29], 0x07ffffffU), 15), shr_32(band_32(in[w + 28], 0x07ffffffU), 12));
        out[c + 25]  = bor_32(shl_32(band_32(in[w + 30], 0x07ffffffU), 10), shr_32(band_32(in[w + 29], 0x07ffffffU), 17));
        out[c + 26]  = bor_32(shl_32(band_32(in[w + 31], 0x07ffffffU),  5), shr_32(band_32(in[w + 30], 0x07ffffffU), 22));
    }
}

void
pack_32_into_28_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 7, w += 8) {
        out[c + 0]  = shl_32(band_32(in[w + 0], 0x0fffffffU),  0);
        out[c + 0] |= shl_32(band_32(in[w + 1], 0x0fffffffU), 28);
        out[c + 1]  = bor_32(shl_32(band_32(in[w + 2], 0x0fffffffU), 24), shr_32(band_32(in[w + 1], 0x0fffffffU), 4));
        out[c + 2]  = bor_32(shl_32(band_32(in[w + 3], 0x0fffffffU), 20), shr_32(band_32(in[w + 2], 0x0fffffffU), 8));
        out[c + 3]  = bor_32(shl_32(band_32(in[w + 4], 0x0fffffffU), 16), shr_32(band_32(in[w + 3], 0x0fffffffU), 12));
        out[c + 4]  = bor_32(shl_32(band_32(in[w + 5], 0x0fffffffU), 12), shr_32(band_32(in[w + 4], 0x0fffffffU), 16));
        out[c + 5]  = bor_32(shl_32(band_32(in[w + 6], 0x0fffffffU),  8), shr_32(band_32(in[w + 5], 0x0fffffffU), 20));
        out[c + 6]  = bor_32(shl_32(band_32(in[w + 7], 0x0fffffffU),  4), shr_32(band_32(in[w + 6], 0x0fffffffU), 24));
    }
}

void
pack_32_into_29_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 29, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x1fffffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x1fffffffU), 29);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x1fffffffU), 26), shr_32(band_32(in[w +  1], 0x1fffffffU), 3));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x1fffffffU), 23), shr_32(band_32(in[w +  2], 0x1fffffffU), 6));
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  4], 0x1fffffffU), 20), shr_32(band_32(in[w +  3], 0x1fffffffU), 9));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  5], 0x1fffffffU), 17), shr_32(band_32(in[w +  4], 0x1fffffffU), 12));
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  6], 0x1fffffffU), 14), shr_32(band_32(in[w +  5], 0x1fffffffU), 15));
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  7], 0x1fffffffU), 11), shr_32(band_32(in[w +  6], 0x1fffffffU), 18));
        out[c +  7]  = bor_32(shl_32(band_32(in[w +  8], 0x1fffffffU),  8), shr_32(band_32(in[w +  7], 0x1fffffffU), 21));
        out[c +  8]  = bor_32(shl_32(band_32(in[w +  9], 0x1fffffffU),  5), shr_32(band_32(in[w +  8], 0x1fffffffU), 24));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 10], 0x1fffffffU),  2), shr_32(band_32(in[w +  9], 0x1fffffffU), 27));
        out[c +  9] |= shl_32(band_32(in[w + 11], 0x1fffffffU), 31);
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 12], 0x1fffffffU), 28), shr_32(band_32(in[w + 11], 0x1fffffffU), 1));
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 13], 0x1fffffffU), 25), shr_32(band_32(in[w + 12], 0x1fffffffU), 4));
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 14], 0x1fffffffU), 22), shr_32(band_32(in[w + 13], 0x1fffffffU), 7));
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 15], 0x1fffffffU), 19), shr_32(band_32(in[w + 14], 0x1fffffffU), 10));
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 16], 0x1fffffffU), 16), shr_32(band_32(in[w + 15], 0x1fffffffU), 13));
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 17], 0x1fffffffU), 13), shr_32(band_32(in[w + 16], 0x1fffffffU), 16));
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 18], 0x1fffffffU), 10), shr_32(band_32(in[w + 17], 0x1fffffffU), 19));
        out[c + 17]  = bor_32(shl_32(band_32(in[w + 19], 0x1fffffffU),  7), shr_32(band_32(in[w + 18], 0x1fffffffU), 22));
        out[c + 18]  = bor_32(shl_32(band_32(in[w + 20], 0x1fffffffU),  4), shr_32(band_32(in[w + 19], 0x1fffffffU), 25));
        out[c + 19]  = bor_32(shl_32(band_32(in[w + 21], 0x1fffffffU),  1), shr_32(band_32(in[w + 20], 0x1fffffffU), 28));
        out[c + 19] |= shl_32(band_32(in[w + 22], 0x1fffffffU), 30);
        out[c + 20]  = bor_32(shl_32(band_32(in[w + 23], 0x1fffffffU), 27), shr_32(band_32(in[w + 22], 0x1fffffffU), 2));
        out[c + 21]  = bor_32(shl_32(band_32(in[w + 24], 0x1fffffffU), 24), shr_32(band_32(in[w + 23], 0x1fffffffU), 5));
        out[c + 22]  = bor_32(shl_32(band_32(in[w + 25], 0x1fffffffU), 21), shr_32(band_32(in[w + 24], 0x1fffffffU), 8));
        out[c + 23]  = bor_32(shl_32(band_32(in[w + 26], 0x1fffffffU), 18), shr_32(band_32(in[w + 25], 0x1fffffffU), 11));
        out[c + 24]  = bor_32(shl_32(band_32(in[w + 27], 0x1fffffffU), 15), shr_32(band_32(in[w + 26], 0x1fffffffU), 14));
        out[c + 25]  = bor_32(shl_32(band_32(in[w + 28], 0x1fffffffU), 12), shr_32(band_32(in[w + 27], 0x1fffffffU), 17));
        out[c + 26]  = bor_32(shl_32(band_32(in[w + 29], 0x1fffffffU),  9), shr_32(band_32(in[w + 28], 0x1fffffffU), 20));
        out[c + 27]  = bor_32(shl_32(band_32(in[w + 30], 0x1fffffffU),  6), shr_32(band_32(in[w + 29], 0x1fffffffU), 23));
        out[c + 28]  = bor_32(shl_32(band_32(in[w + 31], 0x1fffffffU),  3), shr_32(band_32(in[w + 30], 0x1fffffffU), 26));
    }
}

void
pack_32_into_30_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 15, w += 16) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x3fffffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x3fffffffU), 30);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x3fffffffU), 28), shr_32(band_32(in[w +  1], 0x3fffffffU), 2));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x3fffffffU), 26), shr_32(band_32(in[w +  2], 0x3fffffffU), 4));
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  4], 0x3fffffffU), 24), shr_32(band_32(in[w +  3], 0x3fffffffU), 6));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  5], 0x3fffffffU), 22), shr_32(band_32(in[w +  4], 0x3fffffffU), 8));
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  6], 0x3fffffffU), 20), shr_32(band_32(in[w +  5], 0x3fffffffU), 10));
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  7], 0x3fffffffU), 18), shr_32(band_32(in[w +  6], 0x3fffffffU), 12));
        out[c +  7]  = bor_32(shl_32(band_32(in[w +  8], 0x3fffffffU), 16), shr_32(band_32(in[w +  7], 0x3fffffffU), 14));
        out[c +  8]  = bor_32(shl_32(band_32(in[w +  9], 0x3fffffffU), 14), shr_32(band_32(in[w +  8], 0x3fffffffU), 16));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 10], 0x3fffffffU), 12), shr_32(band_32(in[w +  9], 0x3fffffffU), 18));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 11], 0x3fffffffU), 10), shr_32(band_32(in[w + 10], 0x3fffffffU), 20));
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 12], 0x3fffffffU),  8), shr_32(band_32(in[w + 11], 0x3fffffffU), 22));
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 13], 0x3fffffffU),  6), shr_32(band_32(in[w + 12], 0x3fffffffU), 24));
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 14], 0x3fffffffU),  4), shr_32(band_32(in[w + 13], 0x3fffffffU), 26));
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 15], 0x3fffffffU),  2), shr_32(band_32(in[w + 14], 0x3fffffffU), 28));
    }
}

void
pack_32_into_31_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t c = 0, w = 0; w < n; c += 31, w += 32) {
        out[c +  0]  = shl_32(band_32(in[w +  0], 0x7fffffffU),  0);
        out[c +  0] |= shl_32(band_32(in[w +  1], 0x7fffffffU), 31);
        out[c +  1]  = bor_32(shl_32(band_32(in[w +  2], 0x7fffffffU), 30), shr_32(band_32(in[w +  1], 0x7fffffffU), 1));
        out[c +  2]  = bor_32(shl_32(band_32(in[w +  3], 0x7fffffffU), 29), shr_32(band_32(in[w +  2], 0x7fffffffU), 2));
        out[c +  3]  = bor_32(shl_32(band_32(in[w +  4], 0x7fffffffU), 28), shr_32(band_32(in[w +  3], 0x7fffffffU), 3));
        out[c +  4]  = bor_32(shl_32(band_32(in[w +  5], 0x7fffffffU), 27), shr_32(band_32(in[w +  4], 0x7fffffffU), 4));
        out[c +  5]  = bor_32(shl_32(band_32(in[w +  6], 0x7fffffffU), 26), shr_32(band_32(in[w +  5], 0x7fffffffU), 5));
        out[c +  6]  = bor_32(shl_32(band_32(in[w +  7], 0x7fffffffU), 25), shr_32(band_32(in[w +  6], 0x7fffffffU), 6));
        out[c +  7]  = bor_32(shl_32(band_32(in[w +  8], 0x7fffffffU), 24), shr_32(band_32(in[w +  7], 0x7fffffffU), 7));
        out[c +  8]  = bor_32(shl_32(band_32(in[w +  9], 0x7fffffffU), 23), shr_32(band_32(in[w +  8], 0x7fffffffU), 8));
        out[c +  9]  = bor_32(shl_32(band_32(in[w + 10], 0x7fffffffU), 22), shr_32(band_32(in[w +  9], 0x7fffffffU), 9));
        out[c + 10]  = bor_32(shl_32(band_32(in[w + 11], 0x7fffffffU), 21), shr_32(band_32(in[w + 10], 0x7fffffffU), 10));
        out[c + 11]  = bor_32(shl_32(band_32(in[w + 12], 0x7fffffffU), 20), shr_32(band_32(in[w + 11], 0x7fffffffU), 11));
        out[c + 12]  = bor_32(shl_32(band_32(in[w + 13], 0x7fffffffU), 19), shr_32(band_32(in[w + 12], 0x7fffffffU), 12));
        out[c + 13]  = bor_32(shl_32(band_32(in[w + 14], 0x7fffffffU), 18), shr_32(band_32(in[w + 13], 0x7fffffffU), 13));
        out[c + 14]  = bor_32(shl_32(band_32(in[w + 15], 0x7fffffffU), 17), shr_32(band_32(in[w + 14], 0x7fffffffU), 14));
        out[c + 15]  = bor_32(shl_32(band_32(in[w + 16], 0x7fffffffU), 16), shr_32(band_32(in[w + 15], 0x7fffffffU), 15));
        out[c + 16]  = bor_32(shl_32(band_32(in[w + 17], 0x7fffffffU), 15), shr_32(band_32(in[w + 16], 0x7fffffffU), 16));
        out[c + 17]  = bor_32(shl_32(band_32(in[w + 18], 0x7fffffffU), 14), shr_32(band_32(in[w + 17], 0x7fffffffU), 17));
        out[c + 18]  = bor_32(shl_32(band_32(in[w + 19], 0x7fffffffU), 13), shr_32(band_32(in[w + 18], 0x7fffffffU), 18));
        out[c + 19]  = bor_32(shl_32(band_32(in[w + 20], 0x7fffffffU), 12), shr_32(band_32(in[w + 19], 0x7fffffffU), 19));
        out[c + 20]  = bor_32(shl_32(band_32(in[w + 21], 0x7fffffffU), 11), shr_32(band_32(in[w + 20], 0x7fffffffU), 20));
        out[c + 21]  = bor_32(shl_32(band_32(in[w + 22], 0x7fffffffU), 10), shr_32(band_32(in[w + 21], 0x7fffffffU), 21));
        out[c + 22]  = bor_32(shl_32(band_32(in[w + 23], 0x7fffffffU),  9), shr_32(band_32(in[w + 22], 0x7fffffffU), 22));
        out[c + 23]  = bor_32(shl_32(band_32(in[w + 24], 0x7fffffffU),  8), shr_32(band_32(in[w + 23], 0x7fffffffU), 23));
        out[c + 24]  = bor_32(shl_32(band_32(in[w + 25], 0x7fffffffU),  7), shr_32(band_32(in[w + 24], 0x7fffffffU), 24));
        out[c + 25]  = bor_32(shl_32(band_32(in[w + 26], 0x7fffffffU),  6), shr_32(band_32(in[w + 25], 0x7fffffffU), 25));
        out[c + 26]  = bor_32(shl_32(band_32(in[w + 27], 0x7fffffffU),  5), shr_32(band_32(in[w + 26], 0x7fffffffU), 26));
        out[c + 27]  = bor_32(shl_32(band_32(in[w + 28], 0x7fffffffU),  4), shr_32(band_32(in[w + 27], 0x7fffffffU), 27));
        out[c + 28]  = bor_32(shl_32(band_32(in[w + 29], 0x7fffffffU),  3), shr_32(band_32(in[w + 28], 0x7fffffffU), 28));
        out[c + 29]  = bor_32(shl_32(band_32(in[w + 30], 0x7fffffffU),  2), shr_32(band_32(in[w + 29], 0x7fffffffU), 29));
        out[c + 30]  = bor_32(shl_32(band_32(in[w + 31], 0x7fffffffU),  1), shr_32(band_32(in[w + 30], 0x7fffffffU), 30));
    }
}
void
unpack_1_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 1) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x00000001U),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x00000002U),  1);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x00000004U),  2);
        out[w +  3] = shr_32(band_32(in[c + 0], 0x00000008U),  3);
        out[w +  4] = shr_32(band_32(in[c + 0], 0x00000010U),  4);
        out[w +  5] = shr_32(band_32(in[c + 0], 0x00000020U),  5);
        out[w +  6] = shr_32(band_32(in[c + 0], 0x00000040U),  6);
        out[w +  7] = shr_32(band_32(in[c + 0], 0x00000080U),  7);
        out[w +  8] = shr_32(band_32(in[c + 0], 0x00000100U),  8);
        out[w +  9] = shr_32(band_32(in[c + 0], 0x00000200U),  9);
        out[w + 10] = shr_32(band_32(in[c + 0], 0x00000400U), 10);
        out[w + 11] = shr_32(band_32(in[c + 0], 0x00000800U), 11);
        out[w + 12] = shr_32(band_32(in[c + 0], 0x00001000U), 12);
        out[w + 13] = shr_32(band_32(in[c + 0], 0x00002000U), 13);
        out[w + 14] = shr_32(band_32(in[c + 0], 0x00004000U), 14);
        out[w + 15] = shr_32(band_32(in[c + 0], 0x00008000U), 15);
        out[w + 16] = shr_32(band_32(in[c + 0], 0x00010000U), 16);
        out[w + 17] = shr_32(band_32(in[c + 0], 0x00020000U), 17);
        out[w + 18] = shr_32(band_32(in[c + 0], 0x00040000U), 18);
        out[w + 19] = shr_32(band_32(in[c + 0], 0x00080000U), 19);
        out[w + 20] = shr_32(band_32(in[c + 0], 0x00100000U), 20);
        out[w + 21] = shr_32(band_32(in[c + 0], 0x00200000U), 21);
        out[w + 22] = shr_32(band_32(in[c + 0], 0x00400000U), 22);
        out[w + 23] = shr_32(band_32(in[c + 0], 0x00800000U), 23);
        out[w + 24] = shr_32(band_32(in[c + 0], 0x01000000U), 24);
        out[w + 25] = shr_32(band_32(in[c + 0], 0x02000000U), 25);
        out[w + 26] = shr_32(band_32(in[c + 0], 0x04000000U), 26);
        out[w + 27] = shr_32(band_32(in[c + 0], 0x08000000U), 27);
        out[w + 28] = shr_32(band_32(in[c + 0], 0x10000000U), 28);
        out[w + 29] = shr_32(band_32(in[c + 0], 0x20000000U), 29);
        out[w + 30] = shr_32(band_32(in[c + 0], 0x40000000U), 30);
        out[w + 31] = shr_32(band_32(in[c + 0], 0x80000000U), 31);
    }
}
void
unpack_2_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 1) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x00000003U),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x0000000cU),  2);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x00000030U),  4);
        out[w +  3] = shr_32(band_32(in[c + 0], 0x000000c0U),  6);
        out[w +  4] = shr_32(band_32(in[c + 0], 0x00000300U),  8);
        out[w +  5] = shr_32(band_32(in[c + 0], 0x00000c00U), 10);
        out[w +  6] = shr_32(band_32(in[c + 0], 0x00003000U), 12);
        out[w +  7] = shr_32(band_32(in[c + 0], 0x0000c000U), 14);
        out[w +  8] = shr_32(band_32(in[c + 0], 0x00030000U), 16);
        out[w +  9] = shr_32(band_32(in[c + 0], 0x000c0000U), 18);
        out[w + 10] = shr_32(band_32(in[c + 0], 0x00300000U), 20);
        out[w + 11] = shr_32(band_32(in[c + 0], 0x00c00000U), 22);
        out[w + 12] = shr_32(band_32(in[c + 0], 0x03000000U), 24);
        out[w + 13] = shr_32(band_32(in[c + 0], 0x0c000000U), 26);
        out[w + 14] = shr_32(band_32(in[c + 0], 0x30000000U), 28);
        out[w + 15] = shr_32(band_32(in[c + 0], 0xc0000000U), 30);
    }
}
void
unpack_3_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 3) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x00000007U),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x00000038U),  3);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x000001c0U),  6);
        out[w +  3] = shr_32(band_32(in[c + 0], 0x00000e00U),  9);
        out[w +  4] = shr_32(band_32(in[c + 0], 0x00007000U), 12);
        out[w +  5] = shr_32(band_32(in[c + 0], 0x00038000U), 15);
        out[w +  6] = shr_32(band_32(in[c + 0], 0x001c0000U), 18);
        out[w +  7] = shr_32(band_32(in[c + 0], 0x00e00000U), 21);
        out[w +  8] = shr_32(band_32(in[c + 0], 0x07000000U), 24);
        out[w +  9] = shr_32(band_32(in[c + 0], 0x38000000U), 27);
        out[w + 10] = bor_32(shr_32(band_32(in[c + 0], 0xc0000000U), 30), shl_32(band_32(in[c + 1], 0x00000001U), 2));
        out[w + 11] = shr_32(band_32(in[c + 1], 0x0000000eU),  1);
        out[w + 12] = shr_32(band_32(in[c + 1], 0x00000070U),  4);
        out[w + 13] = shr_32(band_32(in[c + 1], 0x00000380U),  7);
        out[w + 14] = shr_32(band_32(in[c + 1], 0x00001c00U), 10);
        out[w + 15] = shr_32(band_32(in[c + 1], 0x0000e000U), 13);
        out[w + 16] = shr_32(band_32(in[c + 1], 0x00070000U), 16);
        out[w + 17] = shr_32(band_32(in[c + 1], 0x00380000U), 19);
        out[w + 18] = shr_32(band_32(in[c + 1], 0x01c00000U), 22);
        out[w + 19] = shr_32(band_32(in[c + 1], 0x0e000000U), 25);
        out[w + 20] = shr_32(band_32(in[c + 1], 0x70000000U), 28);
        out[w + 21] = bor_32(shr_32(band_32(in[c + 1], 0x80000000U), 31), shl_32(band_32(in[c + 2], 0x00000003U), 1));
        out[w + 22] = shr_32(band_32(in[c + 2], 0x0000001cU),  2);
        out[w + 23] = shr_32(band_32(in[c + 2], 0x000000e0U),  5);
        out[w + 24] = shr_32(band_32(in[c + 2], 0x00000700U),  8);
        out[w + 25] = shr_32(band_32(in[c + 2], 0x00003800U), 11);
        out[w + 26] = shr_32(band_32(in[c + 2], 0x0001c000U), 14);
        out[w + 27] = shr_32(band_32(in[c + 2], 0x000e0000U), 17);
        out[w + 28] = shr_32(band_32(in[c + 2], 0x00700000U), 20);
        out[w + 29] = shr_32(band_32(in[c + 2], 0x03800000U), 23);
        out[w + 30] = shr_32(band_32(in[c + 2], 0x1c000000U), 26);
        out[w + 31] = shr_32(band_32(in[c + 2], 0xe0000000U), 29);
    }
}
void
unpack_4_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 1) {
        out[w + 0] = shr_32(band_32(in[c + 0], 0x0000000fU),  0);
        out[w + 1] = shr_32(band_32(in[c + 0], 0x000000f0U),  4);
        out[w + 2] = shr_32(band_32(in[c + 0], 0x00000f00U),  8);
        out[w + 3] = shr_32(band_32(in[c + 0], 0x0000f000U), 12);
        out[w + 4] = shr_32(band_32(in[c + 0], 0x000f0000U), 16);
        out[w + 5] = shr_32(band_32(in[c + 0], 0x00f00000U), 20);
        out[w + 6] = shr_32(band_32(in[c + 0], 0x0f000000U), 24);
        out[w + 7] = shr_32(band_32(in[c + 0], 0xf0000000U), 28);
    }
}
void
unpack_5_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 5) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x0000001fU),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x000003e0U),  5);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x00007c00U), 10);
        out[w +  3] = shr_32(band_32(in[c + 0], 0x000f8000U), 15);
        out[w +  4] = shr_32(band_32(in[c + 0], 0x01f00000U), 20);
        out[w +  5] = shr_32(band_32(in[c + 0], 0x3e000000U), 25);
        out[w +  6] = bor_32(shr_32(band_32(in[c + 0], 0xc0000000U), 30), shl_32(band_32(in[c + 1], 0x00000007U), 2));
        out[w +  7] = shr_32(band_32(in[c + 1], 0x000000f8U),  3);
        out[w +  8] = shr_32(band_32(in[c + 1], 0x00001f00U),  8);
        out[w +  9] = shr_32(band_32(in[c + 1], 0x0003e000U), 13);
        out[w + 10] = shr_32(band_32(in[c + 1], 0x007c0000U), 18);
        out[w + 11] = shr_32(band_32(in[c + 1], 0x0f800000U), 23);
        out[w + 12] = bor_32(shr_32(band_32(in[c + 1], 0xf0000000U), 28), shl_32(band_32(in[c + 2], 0x00000001U), 4));
        out[w + 13] = shr_32(band_32(in[c + 2], 0x0000003eU),  1);
        out[w + 14] = shr_32(band_32(in[c + 2], 0x000007c0U),  6);
        out[w + 15] = shr_32(band_32(in[c + 2], 0x0000f800U), 11);
        out[w + 16] = shr_32(band_32(in[c + 2], 0x001f0000U), 16);
        out[w + 17] = shr_32(band_32(in[c + 2], 0x03e00000U), 21);
        out[w + 18] = shr_32(band_32(in[c + 2], 0x7c000000U), 26);
        out[w + 19] = bor_32(shr_32(band_32(in[c + 2], 0x80000000U), 31), shl_32(band_32(in[c + 3], 0x0000000fU), 1));
        out[w + 20] = shr_32(band_32(in[c + 3], 0x000001f0U),  4);
        out[w + 21] = shr_32(band_32(in[c + 3], 0x00003e00U),  9);
        out[w + 22] = shr_32(band_32(in[c + 3], 0x0007c000U), 14);
        out[w + 23] = shr_32(band_32(in[c + 3], 0x00f80000U), 19);
        out[w + 24] = shr_32(band_32(in[c + 3], 0x1f000000U), 24);
        out[w + 25] = bor_32(shr_32(band_32(in[c + 3], 0xe0000000U), 29), shl_32(band_32(in[c + 4], 0x00000003U), 3));
        out[w + 26] = shr_32(band_32(in[c + 4], 0x0000007cU),  2);
        out[w + 27] = shr_32(band_32(in[c + 4], 0x00000f80U),  7);
        out[w + 28] = shr_32(band_32(in[c + 4], 0x0001f000U), 12);
        out[w + 29] = shr_32(band_32(in[c + 4], 0x003e0000U), 17);
        out[w + 30] = shr_32(band_32(in[c + 4], 0x07c00000U), 22);
        out[w + 31] = shr_32(band_32(in[c + 4], 0xf8000000U), 27);
    }
}
void
unpack_6_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 3) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x0000003fU),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x00000fc0U),  6);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x0003f000U), 12);
        out[w +  3] = shr_32(band_32(in[c + 0], 0x00fc0000U), 18);
        out[w +  4] = shr_32(band_32(in[c + 0], 0x3f000000U), 24);
        out[w +  5] = bor_32(shr_32(band_32(in[c + 0], 0xc0000000U), 30), shl_32(band_32(in[c + 1], 0x0000000fU), 2));
        out[w +  6] = shr_32(band_32(in[c + 1], 0x000003f0U),  4);
        out[w +  7] = shr_32(band_32(in[c + 1], 0x0000fc00U), 10);
        out[w +  8] = shr_32(band_32(in[c + 1], 0x003f0000U), 16);
        out[w +  9] = shr_32(band_32(in[c + 1], 0x0fc00000U), 22);
        out[w + 10] = bor_32(shr_32(band_32(in[c + 1], 0xf0000000U), 28), shl_32(band_32(in[c + 2], 0x00000003U), 4));
        out[w + 11] = shr_32(band_32(in[c + 2], 0x000000fcU),  2);
        out[w + 12] = shr_32(band_32(in[c + 2], 0x00003f00U),  8);
        out[w + 13] = shr_32(band_32(in[c + 2], 0x000fc000U), 14);
        out[w + 14] = shr_32(band_32(in[c + 2], 0x03f00000U), 20);
        out[w + 15] = shr_32(band_32(in[c + 2], 0xfc000000U), 26);
    }
}
void
unpack_7_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 7) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x0000007fU),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x00003f80U),  7);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x001fc000U), 14);
        out[w +  3] = shr_32(band_32(in[c + 0], 0x0fe00000U), 21);
        out[w +  4] = bor_32(shr_32(band_32(in[c + 0], 0xf0000000U), 28), shl_32(band_32(in[c + 1], 0x00000007U), 4));
        out[w +  5] = shr_32(band_32(in[c + 1], 0x000003f8U),  3);
        out[w +  6] = shr_32(band_32(in[c + 1], 0x0001fc00U), 10);
        out[w +  7] = shr_32(band_32(in[c + 1], 0x00fe0000U), 17);
        out[w +  8] = shr_32(band_32(in[c + 1], 0x7f000000U), 24);
        out[w +  9] = bor_32(shr_32(band_32(in[c + 1], 0x80000000U), 31), shl_32(band_32(in[c + 2], 0x0000003fU), 1));
        out[w + 10] = shr_32(band_32(in[c + 2], 0x00001fc0U),  6);
        out[w + 11] = shr_32(band_32(in[c + 2], 0x000fe000U), 13);
        out[w + 12] = shr_32(band_32(in[c + 2], 0x07f00000U), 20);
        out[w + 13] = bor_32(shr_32(band_32(in[c + 2], 0xf8000000U), 27), shl_32(band_32(in[c + 3], 0x00000003U), 5));
        out[w + 14] = shr_32(band_32(in[c + 3], 0x000001fcU),  2);
        out[w + 15] = shr_32(band_32(in[c + 3], 0x0000fe00U),  9);
        out[w + 16] = shr_32(band_32(in[c + 3], 0x007f0000U), 16);
        out[w + 17] = shr_32(band_32(in[c + 3], 0x3f800000U), 23);
        out[w + 18] = bor_32(shr_32(band_32(in[c + 3], 0xc0000000U), 30), shl_32(band_32(in[c + 4], 0x0000001fU), 2));
        out[w + 19] = shr_32(band_32(in[c + 4], 0x00000fe0U),  5);
        out[w + 20] = shr_32(band_32(in[c + 4], 0x0007f000U), 12);
        out[w + 21] = shr_32(band_32(in[c + 4], 0x03f80000U), 19);
        out[w + 22] = bor_32(shr_32(band_32(in[c + 4], 0xfc000000U), 26), shl_32(band_32(in[c + 5], 0x00000001U), 6));
        out[w + 23] = shr_32(band_32(in[c + 5], 0x000000feU),  1);
        out[w + 24] = shr_32(band_32(in[c + 5], 0x00007f00U),  8);
        out[w + 25] = shr_32(band_32(in[c + 5], 0x003f8000U), 15);
        out[w + 26] = shr_32(band_32(in[c + 5], 0x1fc00000U), 22);
        out[w + 27] = bor_32(shr_32(band_32(in[c + 5], 0xe0000000U), 29), shl_32(band_32(in[c + 6], 0x0000000fU), 3));
        out[w + 28] = shr_32(band_32(in[c + 6], 0x000007f0U),  4);
        out[w + 29] = shr_32(band_32(in[c + 6], 0x0003f800U), 11);
        out[w + 30] = shr_32(band_32(in[c + 6], 0x01fc0000U), 18);
        out[w + 31] = shr_32(band_32(in[c + 6], 0xfe000000U), 25);
    }
}
void
unpack_8_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 4, c += 1) {
        out[w + 0] = shr_32(band_32(in[c + 0], 0x000000ffU),  0);
        out[w + 1] = shr_32(band_32(in[c + 0], 0x0000ff00U),  8);
        out[w + 2] = shr_32(band_32(in[c + 0], 0x00ff0000U), 16);
        out[w + 3] = shr_32(band_32(in[c + 0], 0xff000000U), 24);
    }
}
void
unpack_9_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 9) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x000001ffU),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x0003fe00U),  9);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x07fc0000U), 18);
        out[w +  3] = bor_32(shr_32(band_32(in[c + 0], 0xf8000000U), 27), shl_32(band_32(in[c + 1], 0x0000000fU), 5));
        out[w +  4] = shr_32(band_32(in[c + 1], 0x00001ff0U),  4);
        out[w +  5] = shr_32(band_32(in[c + 1], 0x003fe000U), 13);
        out[w +  6] = shr_32(band_32(in[c + 1], 0x7fc00000U), 22);
        out[w +  7] = bor_32(shr_32(band_32(in[c + 1], 0x80000000U), 31), shl_32(band_32(in[c + 2], 0x000000ffU), 1));
        out[w +  8] = shr_32(band_32(in[c + 2], 0x0001ff00U),  8);
        out[w +  9] = shr_32(band_32(in[c + 2], 0x03fe0000U), 17);
        out[w + 10] = bor_32(shr_32(band_32(in[c + 2], 0xfc000000U), 26), shl_32(band_32(in[c + 3], 0x00000007U), 6));
        out[w + 11] = shr_32(band_32(in[c + 3], 0x00000ff8U),  3);
        out[w + 12] = shr_32(band_32(in[c + 3], 0x001ff000U), 12);
        out[w + 13] = shr_32(band_32(in[c + 3], 0x3fe00000U), 21);
        out[w + 14] = bor_32(shr_32(band_32(in[c + 3], 0xc0000000U), 30), shl_32(band_32(in[c + 4], 0x0000007fU), 2));
        out[w + 15] = shr_32(band_32(in[c + 4], 0x0000ff80U),  7);
        out[w + 16] = shr_32(band_32(in[c + 4], 0x01ff0000U), 16);
        out[w + 17] = bor_32(shr_32(band_32(in[c + 4], 0xfe000000U), 25), shl_32(band_32(in[c + 5], 0x00000003U), 7));
        out[w + 18] = shr_32(band_32(in[c + 5], 0x000007fcU),  2);
        out[w + 19] = shr_32(band_32(in[c + 5], 0x000ff800U), 11);
        out[w + 20] = shr_32(band_32(in[c + 5], 0x1ff00000U), 20);
        out[w + 21] = bor_32(shr_32(band_32(in[c + 5], 0xe0000000U), 29), shl_32(band_32(in[c + 6], 0x0000003fU), 3));
        out[w + 22] = shr_32(band_32(in[c + 6], 0x00007fc0U),  6);
        out[w + 23] = shr_32(band_32(in[c + 6], 0x00ff8000U), 15);
        out[w + 24] = bor_32(shr_32(band_32(in[c + 6], 0xff000000U), 24), shl_32(band_32(in[c + 7], 0x00000001U), 8));
        out[w + 25] = shr_32(band_32(in[c + 7], 0x000003feU),  1);
        out[w + 26] = shr_32(band_32(in[c + 7], 0x0007fc00U), 10);
        out[w + 27] = shr_32(band_32(in[c + 7], 0x0ff80000U), 19);
        out[w + 28] = bor_32(shr_32(band_32(in[c + 7], 0xf0000000U), 28), shl_32(band_32(in[c + 8], 0x0000001fU), 4));
        out[w + 29] = shr_32(band_32(in[c + 8], 0x00003fe0U),  5);
        out[w + 30] = shr_32(band_32(in[c + 8], 0x007fc000U), 14);
        out[w + 31] = shr_32(band_32(in[c + 8], 0xff800000U), 23);
    }
}
void
unpack_10_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 5) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x000003ffU),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x000ffc00U), 10);
        out[w +  2] = shr_32(band_32(in[c + 0], 0x3ff00000U), 20);
        out[w +  3] = bor_32(shr_32(band_32(in[c + 0], 0xc0000000U), 30), shl_32(band_32(in[c + 1], 0x000000ffU), 2));
        out[w +  4] = shr_32(band_32(in[c + 1], 0x0003ff00U),  8);
        out[w +  5] = shr_32(band_32(in[c + 1], 0x0ffc0000U), 18);
        out[w +  6] = bor_32(shr_32(band_32(in[c + 1], 0xf0000000U), 28), shl_32(band_32(in[c + 2], 0x0000003fU), 4));
        out[w +  7] = shr_32(band_32(in[c + 2], 0x0000ffc0U),  6);
        out[w +  8] = shr_32(band_32(in[c + 2], 0x03ff0000U), 16);
        out[w +  9] = bor_32(shr_32(band_32(in[c + 2], 0xfc000000U), 26), shl_32(band_32(in[c + 3], 0x0000000fU), 6));
        out[w + 10] = shr_32(band_32(in[c + 3], 0x00003ff0U),  4);
        out[w + 11] = shr_32(band_32(in[c + 3], 0x00ffc000U), 14);
        out[w + 12] = bor_32(shr_32(band_32(in[c + 3], 0xff000000U), 24), shl_32(band_32(in[c + 4], 0x00000003U), 8));
        out[w + 13] = shr_32(band_32(in[c + 4], 0x00000ffcU),  2);
        out[w + 14] = shr_32(band_32(in[c + 4], 0x003ff000U), 12);
        out[w + 15] = shr_32(band_32(in[c + 4], 0xffc00000U), 22);
    }
}
void
unpack_11_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 11) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x000007ffU),  0);
        out[w +  1] = shr_32(band_32(in[c +  0], 0x003ff800U), 11);
        out[w +  2] = bor_32(shr_32(band_32(in[c +  0], 0xffc00000U), 22), shl_32(band_32(in[c +  1], 0x00000001U), 10));
        out[w +  3] = shr_32(band_32(in[c +  1], 0x00000ffeU),  1);
        out[w +  4] = shr_32(band_32(in[c +  1], 0x007ff000U), 12);
        out[w +  5] = bor_32(shr_32(band_32(in[c +  1], 0xff800000U), 23), shl_32(band_32(in[c +  2], 0x00000003U), 9));
        out[w +  6] = shr_32(band_32(in[c +  2], 0x00001ffcU),  2);
        out[w +  7] = shr_32(band_32(in[c +  2], 0x00ffe000U), 13);
        out[w +  8] = bor_32(shr_32(band_32(in[c +  2], 0xff000000U), 24), shl_32(band_32(in[c +  3], 0x00000007U), 8));
        out[w +  9] = shr_32(band_32(in[c +  3], 0x00003ff8U),  3);
        out[w + 10] = shr_32(band_32(in[c +  3], 0x01ffc000U), 14);
        out[w + 11] = bor_32(shr_32(band_32(in[c +  3], 0xfe000000U), 25), shl_32(band_32(in[c +  4], 0x0000000fU), 7));
        out[w + 12] = shr_32(band_32(in[c +  4], 0x00007ff0U),  4);
        out[w + 13] = shr_32(band_32(in[c +  4], 0x03ff8000U), 15);
        out[w + 14] = bor_32(shr_32(band_32(in[c +  4], 0xfc000000U), 26), shl_32(band_32(in[c +  5], 0x0000001fU), 6));
        out[w + 15] = shr_32(band_32(in[c +  5], 0x0000ffe0U),  5);
        out[w + 16] = shr_32(band_32(in[c +  5], 0x07ff0000U), 16);
        out[w + 17] = bor_32(shr_32(band_32(in[c +  5], 0xf8000000U), 27), shl_32(band_32(in[c +  6], 0x0000003fU), 5));
        out[w + 18] = shr_32(band_32(in[c +  6], 0x0001ffc0U),  6);
        out[w + 19] = shr_32(band_32(in[c +  6], 0x0ffe0000U), 17);
        out[w + 20] = bor_32(shr_32(band_32(in[c +  6], 0xf0000000U), 28), shl_32(band_32(in[c +  7], 0x0000007fU), 4));
        out[w + 21] = shr_32(band_32(in[c +  7], 0x0003ff80U),  7);
        out[w + 22] = shr_32(band_32(in[c +  7], 0x1ffc0000U), 18);
        out[w + 23] = bor_32(shr_32(band_32(in[c +  7], 0xe0000000U), 29), shl_32(band_32(in[c +  8], 0x000000ffU), 3));
        out[w + 24] = shr_32(band_32(in[c +  8], 0x0007ff00U),  8);
        out[w + 25] = shr_32(band_32(in[c +  8], 0x3ff80000U), 19);
        out[w + 26] = bor_32(shr_32(band_32(in[c +  8], 0xc0000000U), 30), shl_32(band_32(in[c +  9], 0x000001ffU), 2));
        out[w + 27] = shr_32(band_32(in[c +  9], 0x000ffe00U),  9);
        out[w + 28] = shr_32(band_32(in[c +  9], 0x7ff00000U), 20);
        out[w + 29] = bor_32(shr_32(band_32(in[c +  9], 0x80000000U), 31), shl_32(band_32(in[c + 10], 0x000003ffU), 1));
        out[w + 30] = shr_32(band_32(in[c + 10], 0x001ffc00U), 10);
        out[w + 31] = shr_32(band_32(in[c + 10], 0xffe00000U), 21);
    }
}
void
unpack_12_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 3) {
        out[w + 0] = shr_32(band_32(in[c + 0], 0x00000fffU),  0);
        out[w + 1] = shr_32(band_32(in[c + 0], 0x00fff000U), 12);
        out[w + 2] = bor_32(shr_32(band_32(in[c + 0], 0xff000000U), 24), shl_32(band_32(in[c + 1], 0x0000000fU), 8));
        out[w + 3] = shr_32(band_32(in[c + 1], 0x0000fff0U),  4);
        out[w + 4] = shr_32(band_32(in[c + 1], 0x0fff0000U), 16);
        out[w + 5] = bor_32(shr_32(band_32(in[c + 1], 0xf0000000U), 28), shl_32(band_32(in[c + 2], 0x000000ffU), 4));
        out[w + 6] = shr_32(band_32(in[c + 2], 0x000fff00U),  8);
        out[w + 7] = shr_32(band_32(in[c + 2], 0xfff00000U), 20);
    }
}
void
unpack_13_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 13) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x00001fffU),  0);
        out[w +  1] = shr_32(band_32(in[c +  0], 0x03ffe000U), 13);
        out[w +  2] = bor_32(shr_32(band_32(in[c +  0], 0xfc000000U), 26), shl_32(band_32(in[c +  1], 0x0000007fU), 6));
        out[w +  3] = shr_32(band_32(in[c +  1], 0x000fff80U),  7);
        out[w +  4] = bor_32(shr_32(band_32(in[c +  1], 0xfff00000U), 20), shl_32(band_32(in[c +  2], 0x00000001U), 12));
        out[w +  5] = shr_32(band_32(in[c +  2], 0x00003ffeU),  1);
        out[w +  6] = shr_32(band_32(in[c +  2], 0x07ffc000U), 14);
        out[w +  7] = bor_32(shr_32(band_32(in[c +  2], 0xf8000000U), 27), shl_32(band_32(in[c +  3], 0x000000ffU), 5));
        out[w +  8] = shr_32(band_32(in[c +  3], 0x001fff00U),  8);
        out[w +  9] = bor_32(shr_32(band_32(in[c +  3], 0xffe00000U), 21), shl_32(band_32(in[c +  4], 0x00000003U), 11));
        out[w + 10] = shr_32(band_32(in[c +  4], 0x00007ffcU),  2);
        out[w + 11] = shr_32(band_32(in[c +  4], 0x0fff8000U), 15);
        out[w + 12] = bor_32(shr_32(band_32(in[c +  4], 0xf0000000U), 28), shl_32(band_32(in[c +  5], 0x000001ffU), 4));
        out[w + 13] = shr_32(band_32(in[c +  5], 0x003ffe00U),  9);
        out[w + 14] = bor_32(shr_32(band_32(in[c +  5], 0xffc00000U), 22), shl_32(band_32(in[c +  6], 0x00000007U), 10));
        out[w + 15] = shr_32(band_32(in[c +  6], 0x0000fff8U),  3);
        out[w + 16] = shr_32(band_32(in[c +  6], 0x1fff0000U), 16);
        out[w + 17] = bor_32(shr_32(band_32(in[c +  6], 0xe0000000U), 29), shl_32(band_32(in[c +  7], 0x000003ffU), 3));
        out[w + 18] = shr_32(band_32(in[c +  7], 0x007ffc00U), 10);
        out[w + 19] = bor_32(shr_32(band_32(in[c +  7], 0xff800000U), 23), shl_32(band_32(in[c +  8], 0x0000000fU), 9));
        out[w + 20] = shr_32(band_32(in[c +  8], 0x0001fff0U),  4);
        out[w + 21] = shr_32(band_32(in[c +  8], 0x3ffe0000U), 17);
        out[w + 22] = bor_32(shr_32(band_32(in[c +  8], 0xc0000000U), 30), shl_32(band_32(in[c +  9], 0x000007ffU), 2));
        out[w + 23] = shr_32(band_32(in[c +  9], 0x00fff800U), 11);
        out[w + 24] = bor_32(shr_32(band_32(in[c +  9], 0xff000000U), 24), shl_32(band_32(in[c + 10], 0x0000001fU), 8));
        out[w + 25] = shr_32(band_32(in[c + 10], 0x0003ffe0U),  5);
        out[w + 26] = shr_32(band_32(in[c + 10], 0x7ffc0000U), 18);
        out[w + 27] = bor_32(shr_32(band_32(in[c + 10], 0x80000000U), 31), shl_32(band_32(in[c + 11], 0x00000fffU), 1));
        out[w + 28] = shr_32(band_32(in[c + 11], 0x01fff000U), 12);
        out[w + 29] = bor_32(shr_32(band_32(in[c + 11], 0xfe000000U), 25), shl_32(band_32(in[c + 12], 0x0000003fU), 7));
        out[w + 30] = shr_32(band_32(in[c + 12], 0x0007ffc0U),  6);
        out[w + 31] = shr_32(band_32(in[c + 12], 0xfff80000U), 19);
    }
}
void
unpack_14_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 7) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x00003fffU),  0);
        out[w +  1] = shr_32(band_32(in[c + 0], 0x0fffc000U), 14);
        out[w +  2] = bor_32(shr_32(band_32(in[c + 0], 0xf0000000U), 28), shl_32(band_32(in[c + 1], 0x000003ffU), 4));
        out[w +  3] = shr_32(band_32(in[c + 1], 0x00fffc00U), 10);
        out[w +  4] = bor_32(shr_32(band_32(in[c + 1], 0xff000000U), 24), shl_32(band_32(in[c + 2], 0x0000003fU), 8));
        out[w +  5] = shr_32(band_32(in[c + 2], 0x000fffc0U),  6);
        out[w +  6] = bor_32(shr_32(band_32(in[c + 2], 0xfff00000U), 20), shl_32(band_32(in[c + 3], 0x00000003U), 12));
        out[w +  7] = shr_32(band_32(in[c + 3], 0x0000fffcU),  2);
        out[w +  8] = shr_32(band_32(in[c + 3], 0x3fff0000U), 16);
        out[w +  9] = bor_32(shr_32(band_32(in[c + 3], 0xc0000000U), 30), shl_32(band_32(in[c + 4], 0x00000fffU), 2));
        out[w + 10] = shr_32(band_32(in[c + 4], 0x03fff000U), 12);
        out[w + 11] = bor_32(shr_32(band_32(in[c + 4], 0xfc000000U), 26), shl_32(band_32(in[c + 5], 0x000000ffU), 6));
        out[w + 12] = shr_32(band_32(in[c + 5], 0x003fff00U),  8);
        out[w + 13] = bor_32(shr_32(band_32(in[c + 5], 0xffc00000U), 22), shl_32(band_32(in[c + 6], 0x0000000fU), 10));
        out[w + 14] = shr_32(band_32(in[c + 6], 0x0003fff0U),  4);
        out[w + 15] = shr_32(band_32(in[c + 6], 0xfffc0000U), 18);
    }
}
void
unpack_15_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 15) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x00007fffU),  0);
        out[w +  1] = shr_32(band_32(in[c +  0], 0x3fff8000U), 15);
        out[w +  2] = bor_32(shr_32(band_32(in[c +  0], 0xc0000000U), 30), shl_32(band_32(in[c +  1], 0x00001fffU), 2));
        out[w +  3] = shr_32(band_32(in[c +  1], 0x0fffe000U), 13);
        out[w +  4] = bor_32(shr_32(band_32(in[c +  1], 0xf0000000U), 28), shl_32(band_32(in[c +  2], 0x000007ffU), 4));
        out[w +  5] = shr_32(band_32(in[c +  2], 0x03fff800U), 11);
        out[w +  6] = bor_32(shr_32(band_32(in[c +  2], 0xfc000000U), 26), shl_32(band_32(in[c +  3], 0x000001ffU), 6));
        out[w +  7] = shr_32(band_32(in[c +  3], 0x00fffe00U),  9);
        out[w +  8] = bor_32(shr_32(band_32(in[c +  3], 0xff000000U), 24), shl_32(band_32(in[c +  4], 0x0000007fU), 8));
        out[w +  9] = shr_32(band_32(in[c +  4], 0x003fff80U),  7);
        out[w + 10] = bor_32(shr_32(band_32(in[c +  4], 0xffc00000U), 22), shl_32(band_32(in[c +  5], 0x0000001fU), 10));
        out[w + 11] = shr_32(band_32(in[c +  5], 0x000fffe0U),  5);
        out[w + 12] = bor_32(shr_32(band_32(in[c +  5], 0xfff00000U), 20), shl_32(band_32(in[c +  6], 0x00000007U), 12));
        out[w + 13] = shr_32(band_32(in[c +  6], 0x0003fff8U),  3);
        out[w + 14] = bor_32(shr_32(band_32(in[c +  6], 0xfffc0000U), 18), shl_32(band_32(in[c +  7], 0x00000001U), 14));
        out[w + 15] = shr_32(band_32(in[c +  7], 0x0000fffeU),  1);
        out[w + 16] = shr_32(band_32(in[c +  7], 0x7fff0000U), 16);
        out[w + 17] = bor_32(shr_32(band_32(in[c +  7], 0x80000000U), 31), shl_32(band_32(in[c +  8], 0x00003fffU), 1));
        out[w + 18] = shr_32(band_32(in[c +  8], 0x1fffc000U), 14);
        out[w + 19] = bor_32(shr_32(band_32(in[c +  8], 0xe0000000U), 29), shl_32(band_32(in[c +  9], 0x00000fffU), 3));
        out[w + 20] = shr_32(band_32(in[c +  9], 0x07fff000U), 12);
        out[w + 21] = bor_32(shr_32(band_32(in[c +  9], 0xf8000000U), 27), shl_32(band_32(in[c + 10], 0x000003ffU), 5));
        out[w + 22] = shr_32(band_32(in[c + 10], 0x01fffc00U), 10);
        out[w + 23] = bor_32(shr_32(band_32(in[c + 10], 0xfe000000U), 25), shl_32(band_32(in[c + 11], 0x000000ffU), 7));
        out[w + 24] = shr_32(band_32(in[c + 11], 0x007fff00U),  8);
        out[w + 25] = bor_32(shr_32(band_32(in[c + 11], 0xff800000U), 23), shl_32(band_32(in[c + 12], 0x0000003fU), 9));
        out[w + 26] = shr_32(band_32(in[c + 12], 0x001fffc0U),  6);
        out[w + 27] = bor_32(shr_32(band_32(in[c + 12], 0xffe00000U), 21), shl_32(band_32(in[c + 13], 0x0000000fU), 11));
        out[w + 28] = shr_32(band_32(in[c + 13], 0x0007fff0U),  4);
        out[w + 29] = bor_32(shr_32(band_32(in[c + 13], 0xfff80000U), 19), shl_32(band_32(in[c + 14], 0x00000003U), 13));
        out[w + 30] = shr_32(band_32(in[c + 14], 0x0001fffcU),  2);
        out[w + 31] = shr_32(band_32(in[c + 14], 0xfffe0000U), 17);
    }
}
void
unpack_16_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 2, c += 1) {
        out[w + 0] = shr_32(band_32(in[c + 0], 0x0000ffffU),  0);
        out[w + 1] = shr_32(band_32(in[c + 0], 0xffff0000U), 16);
    }
}
void
unpack_17_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 17) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x0001ffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xfffe0000U), 17), shl_32(band_32(in[c +  1], 0x00000003U), 15));
        out[w +  2] = shr_32(band_32(in[c +  1], 0x0007fffcU),  2);
        out[w +  3] = bor_32(shr_32(band_32(in[c +  1], 0xfff80000U), 19), shl_32(band_32(in[c +  2], 0x0000000fU), 13));
        out[w +  4] = shr_32(band_32(in[c +  2], 0x001ffff0U),  4);
        out[w +  5] = bor_32(shr_32(band_32(in[c +  2], 0xffe00000U), 21), shl_32(band_32(in[c +  3], 0x0000003fU), 11));
        out[w +  6] = shr_32(band_32(in[c +  3], 0x007fffc0U),  6);
        out[w +  7] = bor_32(shr_32(band_32(in[c +  3], 0xff800000U), 23), shl_32(band_32(in[c +  4], 0x000000ffU), 9));
        out[w +  8] = shr_32(band_32(in[c +  4], 0x01ffff00U),  8);
        out[w +  9] = bor_32(shr_32(band_32(in[c +  4], 0xfe000000U), 25), shl_32(band_32(in[c +  5], 0x000003ffU), 7));
        out[w + 10] = shr_32(band_32(in[c +  5], 0x07fffc00U), 10);
        out[w + 11] = bor_32(shr_32(band_32(in[c +  5], 0xf8000000U), 27), shl_32(band_32(in[c +  6], 0x00000fffU), 5));
        out[w + 12] = shr_32(band_32(in[c +  6], 0x1ffff000U), 12);
        out[w + 13] = bor_32(shr_32(band_32(in[c +  6], 0xe0000000U), 29), shl_32(band_32(in[c +  7], 0x00003fffU), 3));
        out[w + 14] = shr_32(band_32(in[c +  7], 0x7fffc000U), 14);
        out[w + 15] = bor_32(shr_32(band_32(in[c +  7], 0x80000000U), 31), shl_32(band_32(in[c +  8], 0x0000ffffU), 1));
        out[w + 16] = bor_32(shr_32(band_32(in[c +  8], 0xffff0000U), 16), shl_32(band_32(in[c +  9], 0x00000001U), 16));
        out[w + 17] = shr_32(band_32(in[c +  9], 0x0003fffeU),  1);
        out[w + 18] = bor_32(shr_32(band_32(in[c +  9], 0xfffc0000U), 18), shl_32(band_32(in[c + 10], 0x00000007U), 14));
        out[w + 19] = shr_32(band_32(in[c + 10], 0x000ffff8U),  3);
        out[w + 20] = bor_32(shr_32(band_32(in[c + 10], 0xfff00000U), 20), shl_32(band_32(in[c + 11], 0x0000001fU), 12));
        out[w + 21] = shr_32(band_32(in[c + 11], 0x003fffe0U),  5);
        out[w + 22] = bor_32(shr_32(band_32(in[c + 11], 0xffc00000U), 22), shl_32(band_32(in[c + 12], 0x0000007fU), 10));
        out[w + 23] = shr_32(band_32(in[c + 12], 0x00ffff80U),  7);
        out[w + 24] = bor_32(shr_32(band_32(in[c + 12], 0xff000000U), 24), shl_32(band_32(in[c + 13], 0x000001ffU), 8));
        out[w + 25] = shr_32(band_32(in[c + 13], 0x03fffe00U),  9);
        out[w + 26] = bor_32(shr_32(band_32(in[c + 13], 0xfc000000U), 26), shl_32(band_32(in[c + 14], 0x000007ffU), 6));
        out[w + 27] = shr_32(band_32(in[c + 14], 0x0ffff800U), 11);
        out[w + 28] = bor_32(shr_32(band_32(in[c + 14], 0xf0000000U), 28), shl_32(band_32(in[c + 15], 0x00001fffU), 4));
        out[w + 29] = shr_32(band_32(in[c + 15], 0x3fffe000U), 13);
        out[w + 30] = bor_32(shr_32(band_32(in[c + 15], 0xc0000000U), 30), shl_32(band_32(in[c + 16], 0x00007fffU), 2));
        out[w + 31] = shr_32(band_32(in[c + 16], 0xffff8000U), 15);
    }
}
void
unpack_18_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 9) {
        out[w +  0] = shr_32(band_32(in[c + 0], 0x0003ffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c + 0], 0xfffc0000U), 18), shl_32(band_32(in[c + 1], 0x0000000fU), 14));
        out[w +  2] = shr_32(band_32(in[c + 1], 0x003ffff0U),  4);
        out[w +  3] = bor_32(shr_32(band_32(in[c + 1], 0xffc00000U), 22), shl_32(band_32(in[c + 2], 0x000000ffU), 10));
        out[w +  4] = shr_32(band_32(in[c + 2], 0x03ffff00U),  8);
        out[w +  5] = bor_32(shr_32(band_32(in[c + 2], 0xfc000000U), 26), shl_32(band_32(in[c + 3], 0x00000fffU), 6));
        out[w +  6] = shr_32(band_32(in[c + 3], 0x3ffff000U), 12);
        out[w +  7] = bor_32(shr_32(band_32(in[c + 3], 0xc0000000U), 30), shl_32(band_32(in[c + 4], 0x0000ffffU), 2));
        out[w +  8] = bor_32(shr_32(band_32(in[c + 4], 0xffff0000U), 16), shl_32(band_32(in[c + 5], 0x00000003U), 16));
        out[w +  9] = shr_32(band_32(in[c + 5], 0x000ffffcU),  2);
        out[w + 10] = bor_32(shr_32(band_32(in[c + 5], 0xfff00000U), 20), shl_32(band_32(in[c + 6], 0x0000003fU), 12));
        out[w + 11] = shr_32(band_32(in[c + 6], 0x00ffffc0U),  6);
        out[w + 12] = bor_32(shr_32(band_32(in[c + 6], 0xff000000U), 24), shl_32(band_32(in[c + 7], 0x000003ffU), 8));
        out[w + 13] = shr_32(band_32(in[c + 7], 0x0ffffc00U), 10);
        out[w + 14] = bor_32(shr_32(band_32(in[c + 7], 0xf0000000U), 28), shl_32(band_32(in[c + 8], 0x00003fffU), 4));
        out[w + 15] = shr_32(band_32(in[c + 8], 0xffffc000U), 14);
    }
}
void
unpack_19_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 19) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x0007ffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xfff80000U), 19), shl_32(band_32(in[c +  1], 0x0000003fU), 13));
        out[w +  2] = shr_32(band_32(in[c +  1], 0x01ffffc0U),  6);
        out[w +  3] = bor_32(shr_32(band_32(in[c +  1], 0xfe000000U), 25), shl_32(band_32(in[c +  2], 0x00000fffU), 7));
        out[w +  4] = shr_32(band_32(in[c +  2], 0x7ffff000U), 12);
        out[w +  5] = bor_32(shr_32(band_32(in[c +  2], 0x80000000U), 31), shl_32(band_32(in[c +  3], 0x0003ffffU), 1));
        out[w +  6] = bor_32(shr_32(band_32(in[c +  3], 0xfffc0000U), 18), shl_32(band_32(in[c +  4], 0x0000001fU), 14));
        out[w +  7] = shr_32(band_32(in[c +  4], 0x00ffffe0U),  5);
        out[w +  8] = bor_32(shr_32(band_32(in[c +  4], 0xff000000U), 24), shl_32(band_32(in[c +  5], 0x000007ffU), 8));
        out[w +  9] = shr_32(band_32(in[c +  5], 0x3ffff800U), 11);
        out[w + 10] = bor_32(shr_32(band_32(in[c +  5], 0xc0000000U), 30), shl_32(band_32(in[c +  6], 0x0001ffffU), 2));
        out[w + 11] = bor_32(shr_32(band_32(in[c +  6], 0xfffe0000U), 17), shl_32(band_32(in[c +  7], 0x0000000fU), 15));
        out[w + 12] = shr_32(band_32(in[c +  7], 0x007ffff0U),  4);
        out[w + 13] = bor_32(shr_32(band_32(in[c +  7], 0xff800000U), 23), shl_32(band_32(in[c +  8], 0x000003ffU), 9));
        out[w + 14] = shr_32(band_32(in[c +  8], 0x1ffffc00U), 10);
        out[w + 15] = bor_32(shr_32(band_32(in[c +  8], 0xe0000000U), 29), shl_32(band_32(in[c +  9], 0x0000ffffU), 3));
        out[w + 16] = bor_32(shr_32(band_32(in[c +  9], 0xffff0000U), 16), shl_32(band_32(in[c + 10], 0x00000007U), 16));
        out[w + 17] = shr_32(band_32(in[c + 10], 0x003ffff8U),  3);
        out[w + 18] = bor_32(shr_32(band_32(in[c + 10], 0xffc00000U), 22), shl_32(band_32(in[c + 11], 0x000001ffU), 10));
        out[w + 19] = shr_32(band_32(in[c + 11], 0x0ffffe00U),  9);
        out[w + 20] = bor_32(shr_32(band_32(in[c + 11], 0xf0000000U), 28), shl_32(band_32(in[c + 12], 0x00007fffU), 4));
        out[w + 21] = bor_32(shr_32(band_32(in[c + 12], 0xffff8000U), 15), shl_32(band_32(in[c + 13], 0x00000003U), 17));
        out[w + 22] = shr_32(band_32(in[c + 13], 0x001ffffcU),  2);
        out[w + 23] = bor_32(shr_32(band_32(in[c + 13], 0xffe00000U), 21), shl_32(band_32(in[c + 14], 0x000000ffU), 11));
        out[w + 24] = shr_32(band_32(in[c + 14], 0x07ffff00U),  8);
        out[w + 25] = bor_32(shr_32(band_32(in[c + 14], 0xf8000000U), 27), shl_32(band_32(in[c + 15], 0x00003fffU), 5));
        out[w + 26] = bor_32(shr_32(band_32(in[c + 15], 0xffffc000U), 14), shl_32(band_32(in[c + 16], 0x00000001U), 18));
        out[w + 27] = shr_32(band_32(in[c + 16], 0x000ffffeU),  1);
        out[w + 28] = bor_32(shr_32(band_32(in[c + 16], 0xfff00000U), 20), shl_32(band_32(in[c + 17], 0x0000007fU), 12));
        out[w + 29] = shr_32(band_32(in[c + 17], 0x03ffff80U),  7);
        out[w + 30] = bor_32(shr_32(band_32(in[c + 17], 0xfc000000U), 26), shl_32(band_32(in[c + 18], 0x00001fffU), 6));
        out[w + 31] = shr_32(band_32(in[c + 18], 0xffffe000U), 13);
    }
}
void
unpack_20_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 5) {
        out[w + 0] = shr_32(band_32(in[c + 0], 0x000fffffU),  0);
        out[w + 1] = bor_32(shr_32(band_32(in[c + 0], 0xfff00000U), 20), shl_32(band_32(in[c + 1], 0x000000ffU), 12));
        out[w + 2] = shr_32(band_32(in[c + 1], 0x0fffff00U),  8);
        out[w + 3] = bor_32(shr_32(band_32(in[c + 1], 0xf0000000U), 28), shl_32(band_32(in[c + 2], 0x0000ffffU), 4));
        out[w + 4] = bor_32(shr_32(band_32(in[c + 2], 0xffff0000U), 16), shl_32(band_32(in[c + 3], 0x0000000fU), 16));
        out[w + 5] = shr_32(band_32(in[c + 3], 0x00fffff0U),  4);
        out[w + 6] = bor_32(shr_32(band_32(in[c + 3], 0xff000000U), 24), shl_32(band_32(in[c + 4], 0x00000fffU), 8));
        out[w + 7] = shr_32(band_32(in[c + 4], 0xfffff000U), 12);
    }
}
void
unpack_21_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 21) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x001fffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xffe00000U), 21), shl_32(band_32(in[c +  1], 0x000003ffU), 11));
        out[w +  2] = shr_32(band_32(in[c +  1], 0x7ffffc00U), 10);
        out[w +  3] = bor_32(shr_32(band_32(in[c +  1], 0x80000000U), 31), shl_32(band_32(in[c +  2], 0x000fffffU), 1));
        out[w +  4] = bor_32(shr_32(band_32(in[c +  2], 0xfff00000U), 20), shl_32(band_32(in[c +  3], 0x000001ffU), 12));
        out[w +  5] = shr_32(band_32(in[c +  3], 0x3ffffe00U),  9);
        out[w +  6] = bor_32(shr_32(band_32(in[c +  3], 0xc0000000U), 30), shl_32(band_32(in[c +  4], 0x0007ffffU), 2));
        out[w +  7] = bor_32(shr_32(band_32(in[c +  4], 0xfff80000U), 19), shl_32(band_32(in[c +  5], 0x000000ffU), 13));
        out[w +  8] = shr_32(band_32(in[c +  5], 0x1fffff00U),  8);
        out[w +  9] = bor_32(shr_32(band_32(in[c +  5], 0xe0000000U), 29), shl_32(band_32(in[c +  6], 0x0003ffffU), 3));
        out[w + 10] = bor_32(shr_32(band_32(in[c +  6], 0xfffc0000U), 18), shl_32(band_32(in[c +  7], 0x0000007fU), 14));
        out[w + 11] = shr_32(band_32(in[c +  7], 0x0fffff80U),  7);
        out[w + 12] = bor_32(shr_32(band_32(in[c +  7], 0xf0000000U), 28), shl_32(band_32(in[c +  8], 0x0001ffffU), 4));
        out[w + 13] = bor_32(shr_32(band_32(in[c +  8], 0xfffe0000U), 17), shl_32(band_32(in[c +  9], 0x0000003fU), 15));
        out[w + 14] = shr_32(band_32(in[c +  9], 0x07ffffc0U),  6);
        out[w + 15] = bor_32(shr_32(band_32(in[c +  9], 0xf8000000U), 27), shl_32(band_32(in[c + 10], 0x0000ffffU), 5));
        out[w + 16] = bor_32(shr_32(band_32(in[c + 10], 0xffff0000U), 16), shl_32(band_32(in[c + 11], 0x0000001fU), 16));
        out[w + 17] = shr_32(band_32(in[c + 11], 0x03ffffe0U),  5);
        out[w + 18] = bor_32(shr_32(band_32(in[c + 11], 0xfc000000U), 26), shl_32(band_32(in[c + 12], 0x00007fffU), 6));
        out[w + 19] = bor_32(shr_32(band_32(in[c + 12], 0xffff8000U), 15), shl_32(band_32(in[c + 13], 0x0000000fU), 17));
        out[w + 20] = shr_32(band_32(in[c + 13], 0x01fffff0U),  4);
        out[w + 21] = bor_32(shr_32(band_32(in[c + 13], 0xfe000000U), 25), shl_32(band_32(in[c + 14], 0x00003fffU), 7));
        out[w + 22] = bor_32(shr_32(band_32(in[c + 14], 0xffffc000U), 14), shl_32(band_32(in[c + 15], 0x00000007U), 18));
        out[w + 23] = shr_32(band_32(in[c + 15], 0x00fffff8U),  3);
        out[w + 24] = bor_32(shr_32(band_32(in[c + 15], 0xff000000U), 24), shl_32(band_32(in[c + 16], 0x00001fffU), 8));
        out[w + 25] = bor_32(shr_32(band_32(in[c + 16], 0xffffe000U), 13), shl_32(band_32(in[c + 17], 0x00000003U), 19));
        out[w + 26] = shr_32(band_32(in[c + 17], 0x007ffffcU),  2);
        out[w + 27] = bor_32(shr_32(band_32(in[c + 17], 0xff800000U), 23), shl_32(band_32(in[c + 18], 0x00000fffU), 9));
        out[w + 28] = bor_32(shr_32(band_32(in[c + 18], 0xfffff000U), 12), shl_32(band_32(in[c + 19], 0x00000001U), 20));
        out[w + 29] = shr_32(band_32(in[c + 19], 0x003ffffeU),  1);
        out[w + 30] = bor_32(shr_32(band_32(in[c + 19], 0xffc00000U), 22), shl_32(band_32(in[c + 20], 0x000007ffU), 10));
        out[w + 31] = shr_32(band_32(in[c + 20], 0xfffff800U), 11);
    }
}
void
unpack_22_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 11) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x003fffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xffc00000U), 22), shl_32(band_32(in[c +  1], 0x00000fffU), 10));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xfffff000U), 12), shl_32(band_32(in[c +  2], 0x00000003U), 20));
        out[w +  3] = shr_32(band_32(in[c +  2], 0x00fffffcU),  2);
        out[w +  4] = bor_32(shr_32(band_32(in[c +  2], 0xff000000U), 24), shl_32(band_32(in[c +  3], 0x00003fffU), 8));
        out[w +  5] = bor_32(shr_32(band_32(in[c +  3], 0xffffc000U), 14), shl_32(band_32(in[c +  4], 0x0000000fU), 18));
        out[w +  6] = shr_32(band_32(in[c +  4], 0x03fffff0U),  4);
        out[w +  7] = bor_32(shr_32(band_32(in[c +  4], 0xfc000000U), 26), shl_32(band_32(in[c +  5], 0x0000ffffU), 6));
        out[w +  8] = bor_32(shr_32(band_32(in[c +  5], 0xffff0000U), 16), shl_32(band_32(in[c +  6], 0x0000003fU), 16));
        out[w +  9] = shr_32(band_32(in[c +  6], 0x0fffffc0U),  6);
        out[w + 10] = bor_32(shr_32(band_32(in[c +  6], 0xf0000000U), 28), shl_32(band_32(in[c +  7], 0x0003ffffU), 4));
        out[w + 11] = bor_32(shr_32(band_32(in[c +  7], 0xfffc0000U), 18), shl_32(band_32(in[c +  8], 0x000000ffU), 14));
        out[w + 12] = shr_32(band_32(in[c +  8], 0x3fffff00U),  8);
        out[w + 13] = bor_32(shr_32(band_32(in[c +  8], 0xc0000000U), 30), shl_32(band_32(in[c +  9], 0x000fffffU), 2));
        out[w + 14] = bor_32(shr_32(band_32(in[c +  9], 0xfff00000U), 20), shl_32(band_32(in[c + 10], 0x000003ffU), 12));
        out[w + 15] = shr_32(band_32(in[c + 10], 0xfffffc00U), 10);
    }
}
void
unpack_23_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 23) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x007fffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xff800000U), 23), shl_32(band_32(in[c +  1], 0x00003fffU), 9));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xffffc000U), 14), shl_32(band_32(in[c +  2], 0x0000001fU), 18));
        out[w +  3] = shr_32(band_32(in[c +  2], 0x0fffffe0U),  5);
        out[w +  4] = bor_32(shr_32(band_32(in[c +  2], 0xf0000000U), 28), shl_32(band_32(in[c +  3], 0x0007ffffU), 4));
        out[w +  5] = bor_32(shr_32(band_32(in[c +  3], 0xfff80000U), 19), shl_32(band_32(in[c +  4], 0x000003ffU), 13));
        out[w +  6] = bor_32(shr_32(band_32(in[c +  4], 0xfffffc00U), 10), shl_32(band_32(in[c +  5], 0x00000001U), 22));
        out[w +  7] = shr_32(band_32(in[c +  5], 0x00fffffeU),  1);
        out[w +  8] = bor_32(shr_32(band_32(in[c +  5], 0xff000000U), 24), shl_32(band_32(in[c +  6], 0x00007fffU), 8));
        out[w +  9] = bor_32(shr_32(band_32(in[c +  6], 0xffff8000U), 15), shl_32(band_32(in[c +  7], 0x0000003fU), 17));
        out[w + 10] = shr_32(band_32(in[c +  7], 0x1fffffc0U),  6);
        out[w + 11] = bor_32(shr_32(band_32(in[c +  7], 0xe0000000U), 29), shl_32(band_32(in[c +  8], 0x000fffffU), 3));
        out[w + 12] = bor_32(shr_32(band_32(in[c +  8], 0xfff00000U), 20), shl_32(band_32(in[c +  9], 0x000007ffU), 12));
        out[w + 13] = bor_32(shr_32(band_32(in[c +  9], 0xfffff800U), 11), shl_32(band_32(in[c + 10], 0x00000003U), 21));
        out[w + 14] = shr_32(band_32(in[c + 10], 0x01fffffcU),  2);
        out[w + 15] = bor_32(shr_32(band_32(in[c + 10], 0xfe000000U), 25), shl_32(band_32(in[c + 11], 0x0000ffffU), 7));
        out[w + 16] = bor_32(shr_32(band_32(in[c + 11], 0xffff0000U), 16), shl_32(band_32(in[c + 12], 0x0000007fU), 16));
        out[w + 17] = shr_32(band_32(in[c + 12], 0x3fffff80U),  7);
        out[w + 18] = bor_32(shr_32(band_32(in[c + 12], 0xc0000000U), 30), shl_32(band_32(in[c + 13], 0x001fffffU), 2));
        out[w + 19] = bor_32(shr_32(band_32(in[c + 13], 0xffe00000U), 21), shl_32(band_32(in[c + 14], 0x00000fffU), 11));
        out[w + 20] = bor_32(shr_32(band_32(in[c + 14], 0xfffff000U), 12), shl_32(band_32(in[c + 15], 0x00000007U), 20));
        out[w + 21] = shr_32(band_32(in[c + 15], 0x03fffff8U),  3);
        out[w + 22] = bor_32(shr_32(band_32(in[c + 15], 0xfc000000U), 26), shl_32(band_32(in[c + 16], 0x0001ffffU), 6));
        out[w + 23] = bor_32(shr_32(band_32(in[c + 16], 0xfffe0000U), 17), shl_32(band_32(in[c + 17], 0x000000ffU), 15));
        out[w + 24] = shr_32(band_32(in[c + 17], 0x7fffff00U),  8);
        out[w + 25] = bor_32(shr_32(band_32(in[c + 17], 0x80000000U), 31), shl_32(band_32(in[c + 18], 0x003fffffU), 1));
        out[w + 26] = bor_32(shr_32(band_32(in[c + 18], 0xffc00000U), 22), shl_32(band_32(in[c + 19], 0x00001fffU), 10));
        out[w + 27] = bor_32(shr_32(band_32(in[c + 19], 0xffffe000U), 13), shl_32(band_32(in[c + 20], 0x0000000fU), 19));
        out[w + 28] = shr_32(band_32(in[c + 20], 0x07fffff0U),  4);
        out[w + 29] = bor_32(shr_32(band_32(in[c + 20], 0xf8000000U), 27), shl_32(band_32(in[c + 21], 0x0003ffffU), 5));
        out[w + 30] = bor_32(shr_32(band_32(in[c + 21], 0xfffc0000U), 18), shl_32(band_32(in[c + 22], 0x000001ffU), 14));
        out[w + 31] = shr_32(band_32(in[c + 22], 0xfffffe00U),  9);
    }
}
void
unpack_24_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 4, c += 3) {
        out[w + 0] = shr_32(band_32(in[c + 0], 0x00ffffffU),  0);
        out[w + 1] = bor_32(shr_32(band_32(in[c + 0], 0xff000000U), 24), shl_32(band_32(in[c + 1], 0x0000ffffU), 8));
        out[w + 2] = bor_32(shr_32(band_32(in[c + 1], 0xffff0000U), 16), shl_32(band_32(in[c + 2], 0x000000ffU), 16));
        out[w + 3] = shr_32(band_32(in[c + 2], 0xffffff00U),  8);
    }
}
void
unpack_25_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 25) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x01ffffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xfe000000U), 25), shl_32(band_32(in[c +  1], 0x0003ffffU), 7));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xfffc0000U), 18), shl_32(band_32(in[c +  2], 0x000007ffU), 14));
        out[w +  3] = bor_32(shr_32(band_32(in[c +  2], 0xfffff800U), 11), shl_32(band_32(in[c +  3], 0x0000000fU), 21));
        out[w +  4] = shr_32(band_32(in[c +  3], 0x1ffffff0U),  4);
        out[w +  5] = bor_32(shr_32(band_32(in[c +  3], 0xe0000000U), 29), shl_32(band_32(in[c +  4], 0x003fffffU), 3));
        out[w +  6] = bor_32(shr_32(band_32(in[c +  4], 0xffc00000U), 22), shl_32(band_32(in[c +  5], 0x00007fffU), 10));
        out[w +  7] = bor_32(shr_32(band_32(in[c +  5], 0xffff8000U), 15), shl_32(band_32(in[c +  6], 0x000000ffU), 17));
        out[w +  8] = bor_32(shr_32(band_32(in[c +  6], 0xffffff00U),  8), shl_32(band_32(in[c +  7], 0x00000001U), 24));
        out[w +  9] = shr_32(band_32(in[c +  7], 0x03fffffeU),  1);
        out[w + 10] = bor_32(shr_32(band_32(in[c +  7], 0xfc000000U), 26), shl_32(band_32(in[c +  8], 0x0007ffffU), 6));
        out[w + 11] = bor_32(shr_32(band_32(in[c +  8], 0xfff80000U), 19), shl_32(band_32(in[c +  9], 0x00000fffU), 13));
        out[w + 12] = bor_32(shr_32(band_32(in[c +  9], 0xfffff000U), 12), shl_32(band_32(in[c + 10], 0x0000001fU), 20));
        out[w + 13] = shr_32(band_32(in[c + 10], 0x3fffffe0U),  5);
        out[w + 14] = bor_32(shr_32(band_32(in[c + 10], 0xc0000000U), 30), shl_32(band_32(in[c + 11], 0x007fffffU), 2));
        out[w + 15] = bor_32(shr_32(band_32(in[c + 11], 0xff800000U), 23), shl_32(band_32(in[c + 12], 0x0000ffffU), 9));
        out[w + 16] = bor_32(shr_32(band_32(in[c + 12], 0xffff0000U), 16), shl_32(band_32(in[c + 13], 0x000001ffU), 16));
        out[w + 17] = bor_32(shr_32(band_32(in[c + 13], 0xfffffe00U),  9), shl_32(band_32(in[c + 14], 0x00000003U), 23));
        out[w + 18] = shr_32(band_32(in[c + 14], 0x07fffffcU),  2);
        out[w + 19] = bor_32(shr_32(band_32(in[c + 14], 0xf8000000U), 27), shl_32(band_32(in[c + 15], 0x000fffffU), 5));
        out[w + 20] = bor_32(shr_32(band_32(in[c + 15], 0xfff00000U), 20), shl_32(band_32(in[c + 16], 0x00001fffU), 12));
        out[w + 21] = bor_32(shr_32(band_32(in[c + 16], 0xffffe000U), 13), shl_32(band_32(in[c + 17], 0x0000003fU), 19));
        out[w + 22] = shr_32(band_32(in[c + 17], 0x7fffffc0U),  6);
        out[w + 23] = bor_32(shr_32(band_32(in[c + 17], 0x80000000U), 31), shl_32(band_32(in[c + 18], 0x00ffffffU), 1));
        out[w + 24] = bor_32(shr_32(band_32(in[c + 18], 0xff000000U), 24), shl_32(band_32(in[c + 19], 0x0001ffffU), 8));
        out[w + 25] = bor_32(shr_32(band_32(in[c + 19], 0xfffe0000U), 17), shl_32(band_32(in[c + 20], 0x000003ffU), 15));
        out[w + 26] = bor_32(shr_32(band_32(in[c + 20], 0xfffffc00U), 10), shl_32(band_32(in[c + 21], 0x00000007U), 22));
        out[w + 27] = shr_32(band_32(in[c + 21], 0x0ffffff8U),  3);
        out[w + 28] = bor_32(shr_32(band_32(in[c + 21], 0xf0000000U), 28), shl_32(band_32(in[c + 22], 0x001fffffU), 4));
        out[w + 29] = bor_32(shr_32(band_32(in[c + 22], 0xffe00000U), 21), shl_32(band_32(in[c + 23], 0x00003fffU), 11));
        out[w + 30] = bor_32(shr_32(band_32(in[c + 23], 0xffffc000U), 14), shl_32(band_32(in[c + 24], 0x0000007fU), 18));
        out[w + 31] = shr_32(band_32(in[c + 24], 0xffffff80U),  7);
    }
}
void
unpack_26_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 13) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x03ffffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xfc000000U), 26), shl_32(band_32(in[c +  1], 0x000fffffU), 6));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xfff00000U), 20), shl_32(band_32(in[c +  2], 0x00003fffU), 12));
        out[w +  3] = bor_32(shr_32(band_32(in[c +  2], 0xffffc000U), 14), shl_32(band_32(in[c +  3], 0x000000ffU), 18));
        out[w +  4] = bor_32(shr_32(band_32(in[c +  3], 0xffffff00U),  8), shl_32(band_32(in[c +  4], 0x00000003U), 24));
        out[w +  5] = shr_32(band_32(in[c +  4], 0x0ffffffcU),  2);
        out[w +  6] = bor_32(shr_32(band_32(in[c +  4], 0xf0000000U), 28), shl_32(band_32(in[c +  5], 0x003fffffU), 4));
        out[w +  7] = bor_32(shr_32(band_32(in[c +  5], 0xffc00000U), 22), shl_32(band_32(in[c +  6], 0x0000ffffU), 10));
        out[w +  8] = bor_32(shr_32(band_32(in[c +  6], 0xffff0000U), 16), shl_32(band_32(in[c +  7], 0x000003ffU), 16));
        out[w +  9] = bor_32(shr_32(band_32(in[c +  7], 0xfffffc00U), 10), shl_32(band_32(in[c +  8], 0x0000000fU), 22));
        out[w + 10] = shr_32(band_32(in[c +  8], 0x3ffffff0U),  4);
        out[w + 11] = bor_32(shr_32(band_32(in[c +  8], 0xc0000000U), 30), shl_32(band_32(in[c +  9], 0x00ffffffU), 2));
        out[w + 12] = bor_32(shr_32(band_32(in[c +  9], 0xff000000U), 24), shl_32(band_32(in[c + 10], 0x0003ffffU), 8));
        out[w + 13] = bor_32(shr_32(band_32(in[c + 10], 0xfffc0000U), 18), shl_32(band_32(in[c + 11], 0x00000fffU), 14));
        out[w + 14] = bor_32(shr_32(band_32(in[c + 11], 0xfffff000U), 12), shl_32(band_32(in[c + 12], 0x0000003fU), 20));
        out[w + 15] = shr_32(band_32(in[c + 12], 0xffffffc0U),  6);
    }
}
void
unpack_27_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 27) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x07ffffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xf8000000U), 27), shl_32(band_32(in[c +  1], 0x003fffffU), 5));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xffc00000U), 22), shl_32(band_32(in[c +  2], 0x0001ffffU), 10));
        out[w +  3] = bor_32(shr_32(band_32(in[c +  2], 0xfffe0000U), 17), shl_32(band_32(in[c +  3], 0x00000fffU), 15));
        out[w +  4] = bor_32(shr_32(band_32(in[c +  3], 0xfffff000U), 12), shl_32(band_32(in[c +  4], 0x0000007fU), 20));
        out[w +  5] = bor_32(shr_32(band_32(in[c +  4], 0xffffff80U),  7), shl_32(band_32(in[c +  5], 0x00000003U), 25));
        out[w +  6] = shr_32(band_32(in[c +  5], 0x1ffffffcU),  2);
        out[w +  7] = bor_32(shr_32(band_32(in[c +  5], 0xe0000000U), 29), shl_32(band_32(in[c +  6], 0x00ffffffU), 3));
        out[w +  8] = bor_32(shr_32(band_32(in[c +  6], 0xff000000U), 24), shl_32(band_32(in[c +  7], 0x0007ffffU), 8));
        out[w +  9] = bor_32(shr_32(band_32(in[c +  7], 0xfff80000U), 19), shl_32(band_32(in[c +  8], 0x00003fffU), 13));
        out[w + 10] = bor_32(shr_32(band_32(in[c +  8], 0xffffc000U), 14), shl_32(band_32(in[c +  9], 0x000001ffU), 18));
        out[w + 11] = bor_32(shr_32(band_32(in[c +  9], 0xfffffe00U),  9), shl_32(band_32(in[c + 10], 0x0000000fU), 23));
        out[w + 12] = shr_32(band_32(in[c + 10], 0x7ffffff0U),  4);
        out[w + 13] = bor_32(shr_32(band_32(in[c + 10], 0x80000000U), 31), shl_32(band_32(in[c + 11], 0x03ffffffU), 1));
        out[w + 14] = bor_32(shr_32(band_32(in[c + 11], 0xfc000000U), 26), shl_32(band_32(in[c + 12], 0x001fffffU), 6));
        out[w + 15] = bor_32(shr_32(band_32(in[c + 12], 0xffe00000U), 21), shl_32(band_32(in[c + 13], 0x0000ffffU), 11));
        out[w + 16] = bor_32(shr_32(band_32(in[c + 13], 0xffff0000U), 16), shl_32(band_32(in[c + 14], 0x000007ffU), 16));
        out[w + 17] = bor_32(shr_32(band_32(in[c + 14], 0xfffff800U), 11), shl_32(band_32(in[c + 15], 0x0000003fU), 21));
        out[w + 18] = bor_32(shr_32(band_32(in[c + 15], 0xffffffc0U),  6), shl_32(band_32(in[c + 16], 0x00000001U), 26));
        out[w + 19] = shr_32(band_32(in[c + 16], 0x0ffffffeU),  1);
        out[w + 20] = bor_32(shr_32(band_32(in[c + 16], 0xf0000000U), 28), shl_32(band_32(in[c + 17], 0x007fffffU), 4));
        out[w + 21] = bor_32(shr_32(band_32(in[c + 17], 0xff800000U), 23), shl_32(band_32(in[c + 18], 0x0003ffffU), 9));
        out[w + 22] = bor_32(shr_32(band_32(in[c + 18], 0xfffc0000U), 18), shl_32(band_32(in[c + 19], 0x00001fffU), 14));
        out[w + 23] = bor_32(shr_32(band_32(in[c + 19], 0xffffe000U), 13), shl_32(band_32(in[c + 20], 0x000000ffU), 19));
        out[w + 24] = bor_32(shr_32(band_32(in[c + 20], 0xffffff00U),  8), shl_32(band_32(in[c + 21], 0x00000007U), 24));
        out[w + 25] = shr_32(band_32(in[c + 21], 0x3ffffff8U),  3);
        out[w + 26] = bor_32(shr_32(band_32(in[c + 21], 0xc0000000U), 30), shl_32(band_32(in[c + 22], 0x01ffffffU), 2));
        out[w + 27] = bor_32(shr_32(band_32(in[c + 22], 0xfe000000U), 25), shl_32(band_32(in[c + 23], 0x000fffffU), 7));
        out[w + 28] = bor_32(shr_32(band_32(in[c + 23], 0xfff00000U), 20), shl_32(band_32(in[c + 24], 0x00007fffU), 12));
        out[w + 29] = bor_32(shr_32(band_32(in[c + 24], 0xffff8000U), 15), shl_32(band_32(in[c + 25], 0x000003ffU), 17));
        out[w + 30] = bor_32(shr_32(band_32(in[c + 25], 0xfffffc00U), 10), shl_32(band_32(in[c + 26], 0x0000001fU), 22));
        out[w + 31] = shr_32(band_32(in[c + 26], 0xffffffe0U),  5);
    }
}
void
unpack_28_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 8, c += 7) {
        out[w + 0] = shr_32(band_32(in[c + 0], 0x0fffffffU),  0);
        out[w + 1] = bor_32(shr_32(band_32(in[c + 0], 0xf0000000U), 28), shl_32(band_32(in[c + 1], 0x00ffffffU), 4));
        out[w + 2] = bor_32(shr_32(band_32(in[c + 1], 0xff000000U), 24), shl_32(band_32(in[c + 2], 0x000fffffU), 8));
        out[w + 3] = bor_32(shr_32(band_32(in[c + 2], 0xfff00000U), 20), shl_32(band_32(in[c + 3], 0x0000ffffU), 12));
        out[w + 4] = bor_32(shr_32(band_32(in[c + 3], 0xffff0000U), 16), shl_32(band_32(in[c + 4], 0x00000fffU), 16));
        out[w + 5] = bor_32(shr_32(band_32(in[c + 4], 0xfffff000U), 12), shl_32(band_32(in[c + 5], 0x000000ffU), 20));
        out[w + 6] = bor_32(shr_32(band_32(in[c + 5], 0xffffff00U),  8), shl_32(band_32(in[c + 6], 0x0000000fU), 24));
        out[w + 7] = shr_32(band_32(in[c + 6], 0xfffffff0U),  4);
    }
}
void
unpack_29_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 29) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x1fffffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xe0000000U), 29), shl_32(band_32(in[c +  1], 0x03ffffffU), 3));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xfc000000U), 26), shl_32(band_32(in[c +  2], 0x007fffffU), 6));
        out[w +  3] = bor_32(shr_32(band_32(in[c +  2], 0xff800000U), 23), shl_32(band_32(in[c +  3], 0x000fffffU), 9));
        out[w +  4] = bor_32(shr_32(band_32(in[c +  3], 0xfff00000U), 20), shl_32(band_32(in[c +  4], 0x0001ffffU), 12));
        out[w +  5] = bor_32(shr_32(band_32(in[c +  4], 0xfffe0000U), 17), shl_32(band_32(in[c +  5], 0x00003fffU), 15));
        out[w +  6] = bor_32(shr_32(band_32(in[c +  5], 0xffffc000U), 14), shl_32(band_32(in[c +  6], 0x000007ffU), 18));
        out[w +  7] = bor_32(shr_32(band_32(in[c +  6], 0xfffff800U), 11), shl_32(band_32(in[c +  7], 0x000000ffU), 21));
        out[w +  8] = bor_32(shr_32(band_32(in[c +  7], 0xffffff00U),  8), shl_32(band_32(in[c +  8], 0x0000001fU), 24));
        out[w +  9] = bor_32(shr_32(band_32(in[c +  8], 0xffffffe0U),  5), shl_32(band_32(in[c +  9], 0x00000003U), 27));
        out[w + 10] = shr_32(band_32(in[c +  9], 0x7ffffffcU),  2);
        out[w + 11] = bor_32(shr_32(band_32(in[c +  9], 0x80000000U), 31), shl_32(band_32(in[c + 10], 0x0fffffffU), 1));
        out[w + 12] = bor_32(shr_32(band_32(in[c + 10], 0xf0000000U), 28), shl_32(band_32(in[c + 11], 0x01ffffffU), 4));
        out[w + 13] = bor_32(shr_32(band_32(in[c + 11], 0xfe000000U), 25), shl_32(band_32(in[c + 12], 0x003fffffU), 7));
        out[w + 14] = bor_32(shr_32(band_32(in[c + 12], 0xffc00000U), 22), shl_32(band_32(in[c + 13], 0x0007ffffU), 10));
        out[w + 15] = bor_32(shr_32(band_32(in[c + 13], 0xfff80000U), 19), shl_32(band_32(in[c + 14], 0x0000ffffU), 13));
        out[w + 16] = bor_32(shr_32(band_32(in[c + 14], 0xffff0000U), 16), shl_32(band_32(in[c + 15], 0x00001fffU), 16));
        out[w + 17] = bor_32(shr_32(band_32(in[c + 15], 0xffffe000U), 13), shl_32(band_32(in[c + 16], 0x000003ffU), 19));
        out[w + 18] = bor_32(shr_32(band_32(in[c + 16], 0xfffffc00U), 10), shl_32(band_32(in[c + 17], 0x0000007fU), 22));
        out[w + 19] = bor_32(shr_32(band_32(in[c + 17], 0xffffff80U),  7), shl_32(band_32(in[c + 18], 0x0000000fU), 25));
        out[w + 20] = bor_32(shr_32(band_32(in[c + 18], 0xfffffff0U),  4), shl_32(band_32(in[c + 19], 0x00000001U), 28));
        out[w + 21] = shr_32(band_32(in[c + 19], 0x3ffffffeU),  1);
        out[w + 22] = bor_32(shr_32(band_32(in[c + 19], 0xc0000000U), 30), shl_32(band_32(in[c + 20], 0x07ffffffU), 2));
        out[w + 23] = bor_32(shr_32(band_32(in[c + 20], 0xf8000000U), 27), shl_32(band_32(in[c + 21], 0x00ffffffU), 5));
        out[w + 24] = bor_32(shr_32(band_32(in[c + 21], 0xff000000U), 24), shl_32(band_32(in[c + 22], 0x001fffffU), 8));
        out[w + 25] = bor_32(shr_32(band_32(in[c + 22], 0xffe00000U), 21), shl_32(band_32(in[c + 23], 0x0003ffffU), 11));
        out[w + 26] = bor_32(shr_32(band_32(in[c + 23], 0xfffc0000U), 18), shl_32(band_32(in[c + 24], 0x00007fffU), 14));
        out[w + 27] = bor_32(shr_32(band_32(in[c + 24], 0xffff8000U), 15), shl_32(band_32(in[c + 25], 0x00000fffU), 17));
        out[w + 28] = bor_32(shr_32(band_32(in[c + 25], 0xfffff000U), 12), shl_32(band_32(in[c + 26], 0x000001ffU), 20));
        out[w + 29] = bor_32(shr_32(band_32(in[c + 26], 0xfffffe00U),  9), shl_32(band_32(in[c + 27], 0x0000003fU), 23));
        out[w + 30] = bor_32(shr_32(band_32(in[c + 27], 0xffffffc0U),  6), shl_32(band_32(in[c + 28], 0x00000007U), 26));
        out[w + 31] = shr_32(band_32(in[c + 28], 0xfffffff8U),  3);
    }
}
void
unpack_30_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 16, c += 15) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x3fffffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0xc0000000U), 30), shl_32(band_32(in[c +  1], 0x0fffffffU), 2));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xf0000000U), 28), shl_32(band_32(in[c +  2], 0x03ffffffU), 4));
        out[w +  3] = bor_32(shr_32(band_32(in[c +  2], 0xfc000000U), 26), shl_32(band_32(in[c +  3], 0x00ffffffU), 6));
        out[w +  4] = bor_32(shr_32(band_32(in[c +  3], 0xff000000U), 24), shl_32(band_32(in[c +  4], 0x003fffffU), 8));
        out[w +  5] = bor_32(shr_32(band_32(in[c +  4], 0xffc00000U), 22), shl_32(band_32(in[c +  5], 0x000fffffU), 10));
        out[w +  6] = bor_32(shr_32(band_32(in[c +  5], 0xfff00000U), 20), shl_32(band_32(in[c +  6], 0x0003ffffU), 12));
        out[w +  7] = bor_32(shr_32(band_32(in[c +  6], 0xfffc0000U), 18), shl_32(band_32(in[c +  7], 0x0000ffffU), 14));
        out[w +  8] = bor_32(shr_32(band_32(in[c +  7], 0xffff0000U), 16), shl_32(band_32(in[c +  8], 0x00003fffU), 16));
        out[w +  9] = bor_32(shr_32(band_32(in[c +  8], 0xffffc000U), 14), shl_32(band_32(in[c +  9], 0x00000fffU), 18));
        out[w + 10] = bor_32(shr_32(band_32(in[c +  9], 0xfffff000U), 12), shl_32(band_32(in[c + 10], 0x000003ffU), 20));
        out[w + 11] = bor_32(shr_32(band_32(in[c + 10], 0xfffffc00U), 10), shl_32(band_32(in[c + 11], 0x000000ffU), 22));
        out[w + 12] = bor_32(shr_32(band_32(in[c + 11], 0xffffff00U),  8), shl_32(band_32(in[c + 12], 0x0000003fU), 24));
        out[w + 13] = bor_32(shr_32(band_32(in[c + 12], 0xffffffc0U),  6), shl_32(band_32(in[c + 13], 0x0000000fU), 26));
        out[w + 14] = bor_32(shr_32(band_32(in[c + 13], 0xfffffff0U),  4), shl_32(band_32(in[c + 14], 0x00000003U), 28));
        out[w + 15] = shr_32(band_32(in[c + 14], 0xfffffffcU),  2);
    }
}
void
unpack_31_into_32_simd(
    uint32_t* __restrict__ out_ptr,
    const uint32_t* __restrict__ in_ptr,
    uint32_t n
)
{
    __m128i* out = reinterpret_cast<__m128i*>(out_ptr);
    const __m128i* in = reinterpret_cast<const __m128i*>(in_ptr);

    for (uint32_t w = 0, c = 0; w < n; w += 32, c += 31) {
        out[w +  0] = shr_32(band_32(in[c +  0], 0x7fffffffU),  0);
        out[w +  1] = bor_32(shr_32(band_32(in[c +  0], 0x80000000U), 31), shl_32(band_32(in[c +  1], 0x3fffffffU), 1));
        out[w +  2] = bor_32(shr_32(band_32(in[c +  1], 0xc0000000U), 30), shl_32(band_32(in[c +  2], 0x1fffffffU), 2));
        out[w +  3] = bor_32(shr_32(band_32(in[c +  2], 0xe0000000U), 29), shl_32(band_32(in[c +  3], 0x0fffffffU), 3));
        out[w +  4] = bor_32(shr_32(band_32(in[c +  3], 0xf0000000U), 28), shl_32(band_32(in[c +  4], 0x07ffffffU), 4));
        out[w +  5] = bor_32(shr_32(band_32(in[c +  4], 0xf8000000U), 27), shl_32(band_32(in[c +  5], 0x03ffffffU), 5));
        out[w +  6] = bor_32(shr_32(band_32(in[c +  5], 0xfc000000U), 26), shl_32(band_32(in[c +  6], 0x01ffffffU), 6));
        out[w +  7] = bor_32(shr_32(band_32(in[c +  6], 0xfe000000U), 25), shl_32(band_32(in[c +  7], 0x00ffffffU), 7));
        out[w +  8] = bor_32(shr_32(band_32(in[c +  7], 0xff000000U), 24), shl_32(band_32(in[c +  8], 0x007fffffU), 8));
        out[w +  9] = bor_32(shr_32(band_32(in[c +  8], 0xff800000U), 23), shl_32(band_32(in[c +  9], 0x003fffffU), 9));
        out[w + 10] = bor_32(shr_32(band_32(in[c +  9], 0xffc00000U), 22), shl_32(band_32(in[c + 10], 0x001fffffU), 10));
        out[w + 11] = bor_32(shr_32(band_32(in[c + 10], 0xffe00000U), 21), shl_32(band_32(in[c + 11], 0x000fffffU), 11));
        out[w + 12] = bor_32(shr_32(band_32(in[c + 11], 0xfff00000U), 20), shl_32(band_32(in[c + 12], 0x0007ffffU), 12));
        out[w + 13] = bor_32(shr_32(band_32(in[c + 12], 0xfff80000U), 19), shl_32(band_32(in[c + 13], 0x0003ffffU), 13));
        out[w + 14] = bor_32(shr_32(band_32(in[c + 13], 0xfffc0000U), 18), shl_32(band_32(in[c + 14], 0x0001ffffU), 14));
        out[w + 15] = bor_32(shr_32(band_32(in[c + 14], 0xfffe0000U), 17), shl_32(band_32(in[c + 15], 0x0000ffffU), 15));
        out[w + 16] = bor_32(shr_32(band_32(in[c + 15], 0xffff0000U), 16), shl_32(band_32(in[c + 16], 0x00007fffU), 16));
        out[w + 17] = bor_32(shr_32(band_32(in[c + 16], 0xffff8000U), 15), shl_32(band_32(in[c + 17], 0x00003fffU), 17));
        out[w + 18] = bor_32(shr_32(band_32(in[c + 17], 0xffffc000U), 14), shl_32(band_32(in[c + 18], 0x00001fffU), 18));
        out[w + 19] = bor_32(shr_32(band_32(in[c + 18], 0xffffe000U), 13), shl_32(band_32(in[c + 19], 0x00000fffU), 19));
        out[w + 20] = bor_32(shr_32(band_32(in[c + 19], 0xfffff000U), 12), shl_32(band_32(in[c + 20], 0x000007ffU), 20));
        out[w + 21] = bor_32(shr_32(band_32(in[c + 20], 0xfffff800U), 11), shl_32(band_32(in[c + 21], 0x000003ffU), 21));
        out[w + 22] = bor_32(shr_32(band_32(in[c + 21], 0xfffffc00U), 10), shl_32(band_32(in[c + 22], 0x000001ffU), 22));
        out[w + 23] = bor_32(shr_32(band_32(in[c + 22], 0xfffffe00U),  9), shl_32(band_32(in[c + 23], 0x000000ffU), 23));
        out[w + 24] = bor_32(shr_32(band_32(in[c + 23], 0xffffff00U),  8), shl_32(band_32(in[c + 24], 0x0000007fU), 24));
        out[w + 25] = bor_32(shr_32(band_32(in[c + 24], 0xffffff80U),  7), shl_32(band_32(in[c + 25], 0x0000003fU), 25));
        out[w + 26] = bor_32(shr_32(band_32(in[c + 25], 0xffffffc0U),  6), shl_32(band_32(in[c + 26], 0x0000001fU), 26));
        out[w + 27] = bor_32(shr_32(band_32(in[c + 26], 0xffffffe0U),  5), shl_32(band_32(in[c + 27], 0x0000000fU), 27));
        out[w + 28] = bor_32(shr_32(band_32(in[c + 27], 0xfffffff0U),  4), shl_32(band_32(in[c + 28], 0x00000007U), 28));
        out[w + 29] = bor_32(shr_32(band_32(in[c + 28], 0xfffffff8U),  3), shl_32(band_32(in[c + 29], 0x00000003U), 29));
        out[w + 30] = bor_32(shr_32(band_32(in[c + 29], 0xfffffffcU),  2), shl_32(band_32(in[c + 30], 0x00000001U), 30));
        out[w + 31] = shr_32(band_32(in[c + 30], 0xfffffffeU),  1);
    }
}

packer_32_ptr packer_32_simd_table[32] = {
    0,
    pack_32_into_1_simd,
    pack_32_into_2_simd,
    pack_32_into_3_simd,
    pack_32_into_4_simd,
    pack_32_into_5_simd,
    pack_32_into_6_simd,
    pack_32_into_7_simd,
    pack_32_into_8_simd,
    pack_32_into_9_simd,
    pack_32_into_10_simd,
    pack_32_into_11_simd,
    pack_32_into_12_simd,
    pack_32_into_13_simd,
    pack_32_into_14_simd,
    pack_32_into_15_simd,
    pack_32_into_16_simd,
    pack_32_into_17_simd,
    pack_32_into_18_simd,
    pack_32_into_19_simd,
    pack_32_into_20_simd,
    pack_32_into_21_simd,
    pack_32_into_22_simd,
    pack_32_into_23_simd,
    pack_32_into_24_simd,
    pack_32_into_25_simd,
    pack_32_into_26_simd,
    pack_32_into_27_simd,
    pack_32_into_28_simd,
    pack_32_into_29_simd,
    pack_32_into_30_simd,
    pack_32_into_31_simd
};

unpacker_32_ptr unpacker_32_simd_table[32] = {
    0,
    unpack_1_into_32_simd,
    unpack_2_into_32_simd,
    unpack_3_into_32_simd,
    unpack_4_into_32_simd,
    unpack_5_into_32_simd,
    unpack_6_into_32_simd,
    unpack_7_into_32_simd,
    unpack_8_into_32_simd,
    unpack_9_into_32_simd,
    unpack_10_into_32_simd,
    unpack_11_into_32_simd,
    unpack_12_into_32_simd,
    unpack_13_into_32_simd,
    unpack_14_into_32_simd,
    unpack_15_into_32_simd,
    unpack_16_into_32_simd,
    unpack_17_into_32_simd,
    unpack_18_into_32_simd,
    unpack_19_into_32_simd,
    unpack_20_into_32_simd,
    unpack_21_into_32_simd,
    unpack_22_into_32_simd,
    unpack_23_into_32_simd,
    unpack_24_into_32_simd,
    unpack_25_into_32_simd,
    unpack_26_into_32_simd,
    unpack_27_into_32_simd,
    unpack_28_into_32_simd,
    unpack_29_into_32_simd,
    unpack_30_into_32_simd,
    unpack_31_into_32_simd
};

} // namespace pack
} // namespace cxxu
